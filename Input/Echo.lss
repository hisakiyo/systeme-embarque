
Echo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000a00  00000a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080010a  0080010a  00000a9e  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000298  00000000  00000000  00000b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00005ad1  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001a93  00000000  00000000  00006871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00006a78  00000000  00000000  00008304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000006f8  00000000  00000000  0000ed7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001d93  00000000  00000000  0000f474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000037fb  00000000  00000000  00011207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000560  00000000  00000000  00014a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c2       	rjmp	.+1264   	; 0x51e <__vector_11>
  2e:	00 00       	nop
  30:	1f c3       	rjmp	.+1598   	; 0x670 <__vector_12>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	14 03 4c 00 55 00 46 00 41 00 20 00 45 00 63 00     ..L.U.F.A. .E.c.
  84:	68 00 6f 00 00 00                                   h.o...

0000008a <ManufacturerString>:
  8a:	1a 03 4c 00 55 00 46 00 41 00 20 00 4c 00 69 00     ..L.U.F.A. .L.i.
  9a:	62 00 72 00 61 00 72 00 79 00 00 00                 b.r.a.r.y...

000000a6 <LanguageString>:
  a6:	04 03 09 04                                         ....

000000aa <ConfigurationDescriptor>:
  aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff ff     .. .....2.......
  ba:	ff 00 07 05 81 03 01 00 05 07 05 02 03 0a 00 05     ................

000000ca <DeviceDescriptor>:
  ca:	12 01 10 01 00 00 00 08 42 42 02 00 01 00 01 02     ........BB......
  da:	dc 01                                               ..

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d2 e0       	ldi	r29, 0x02	; 2
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1

000000ea <.Loc.1>:
  ea:	a0 e0       	ldi	r26, 0x00	; 0

000000ec <.Loc.2>:
  ec:	b1 e0       	ldi	r27, 0x01	; 1

000000ee <.Loc.3>:
  ee:	e0 e0       	ldi	r30, 0x00	; 0

000000f0 <.Loc.4>:
  f0:	fa e0       	ldi	r31, 0x0A	; 10

000000f2 <.Loc.5>:
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <.L__do_copy_data_start>

000000f4 <.L__do_copy_data_loop>:
  f4:	05 90       	lpm	r0, Z+

000000f6 <.Loc.7>:
  f6:	0d 92       	st	X+, r0

000000f8 <.L__do_copy_data_start>:
  f8:	aa 30       	cpi	r26, 0x0A	; 10

000000fa <.Loc.9>:
  fa:	b1 07       	cpc	r27, r17

000000fc <.Loc.10>:
  fc:	d9 f7       	brne	.-10     	; 0xf4 <.L__do_copy_data_loop>

000000fe <__do_clear_bss>:
  fe:	21 e0       	ldi	r18, 0x01	; 1

00000100 <.Loc.1>:
 100:	aa e0       	ldi	r26, 0x0A	; 10

00000102 <.Loc.2>:
 102:	b1 e0       	ldi	r27, 0x01	; 1

00000104 <.Loc.3>:
 104:	01 c0       	rjmp	.+2      	; 0x108 <.Loc.5>

00000106 <.Loc.4>:
 106:	1d 92       	st	X+, r1

00000108 <.Loc.5>:
 108:	a2 32       	cpi	r26, 0x22	; 34

0000010a <.Loc.6>:
 10a:	b2 07       	cpc	r27, r18

0000010c <.Loc.7>:
 10c:	e1 f7       	brne	.-8      	; 0x106 <.Loc.4>

0000010e <L0^A>:
 10e:	73 d0       	rcall	.+230    	; 0x1f6 <main>
 110:	75 c4       	rjmp	.+2282   	; 0x9fc <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 114:	84 b7       	in	r24, 0x34	; 52
 116:	87 7f       	andi	r24, 0xF7	; 247
 118:	84 bf       	out	0x34, r24	; 52

0000011a <.LBB40>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	a8 95       	wdr
 120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 124:	88 61       	ori	r24, 0x18	; 24
 126:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 12e:	0f be       	out	0x3f, r0	; 63

00000130 <.LBB43>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 140:	0f be       	out	0x3f, r0	; 63

00000142 <.LBE43>:

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	USB_Init();
 142:	de c1       	rjmp	.+956    	; 0x500 <USB_Init>

00000144 <EVENT_USB_Device_Connect>:
}

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
}
 144:	08 95       	ret

00000146 <EVENT_USB_Device_Disconnect>:
 146:	08 95       	ret

00000148 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 148:	42 e0       	ldi	r20, 0x02	; 2
 14a:	61 ec       	ldi	r22, 0xC1	; 193
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	4d d1       	rcall	.+666    	; 0x3ea <Endpoint_ConfigureEndpoint_Prv>

00000150 <.LBB49>:
 150:	42 e1       	ldi	r20, 0x12	; 18
 152:	60 ec       	ldi	r22, 0xC0	; 192
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	49 c1       	rjmp	.+658    	; 0x3ea <Endpoint_ConfigureEndpoint_Prv>

00000158 <EVENT_USB_Device_ControlRequest>:
 158:	08 95       	ret

0000015a <Handle_EP_IN>:
volatile char EP_Data[10];

unsigned char present = 0;

void Handle_EP_IN(void)
{
 15a:	cf 93       	push	r28

0000015c <.LBB53>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 15c:	c1 e0       	ldi	r28, 0x01	; 1
 15e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000162 <.LBB55>:
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 162:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000166 <.LBE55>:
	/* Select the IN Endpoint */
	Endpoint_SelectEndpoint(ECHO_IN_EPADDR);

	/* Check if IN Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed() && present)
 166:	85 ff       	sbrs	r24, 5
 168:	1c c0       	rjmp	.+56     	; 0x1a2 <.L6>

0000016a <.Loc.53>:
 16a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <present>
 16e:	88 23       	and	r24, r24
 170:	c1 f0       	breq	.+48     	; 0x1a2 <.L6>

00000172 <.Loc.54>:
	{
		if (strncmp(EP_Data, token, 10) == 0)
 172:	4a e0       	ldi	r20, 0x0A	; 10
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	71 e0       	ldi	r23, 0x01	; 1
 17a:	8b e0       	ldi	r24, 0x0B	; 11
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	30 d4       	rcall	.+2144   	; 0x9e0 <strncmp>

00000180 <.LVL8>:
 180:	89 2b       	or	r24, r25
 182:	89 f4       	brne	.+34     	; 0x1a6 <.L8>

00000184 <.LBB57>:
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 184:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

00000188 <.LBE57>:
		{
			Endpoint_Write_8(0);
			PORTB &= 0b10000000;
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	80 78       	andi	r24, 0x80	; 128
 18c:	85 b9       	out	0x05, r24	; 5

0000018e <.Loc.64>:
			PORTB |= 0b00101010;
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	8a 62       	ori	r24, 0x2A	; 42

00000192 <.L16>:
		}
		else
		{
			Endpoint_Write_8(1);
			PORTB &= 0b10000000;
			PORTB |= 0b01010101;
 192:	85 b9       	out	0x05, r24	; 5

00000194 <.LBB59>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 194:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 198:	8e 77       	andi	r24, 0x7E	; 126
 19a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000019e <.LBE59>:
		}

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		present = 0;
 19e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <present>

000001a2 <.L6>:
	}
}
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <.L8>:
				UEDATX = Data;
 1a6:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

000001aa <.LBE61>:
			PORTB &= 0b10000000;
 1aa:	85 b1       	in	r24, 0x05	; 5
 1ac:	80 78       	andi	r24, 0x80	; 128
 1ae:	85 b9       	out	0x05, r24	; 5

000001b0 <.Loc.81>:
			PORTB |= 0b01010101;
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	85 65       	ori	r24, 0x55	; 85
 1b4:	ee cf       	rjmp	.-36     	; 0x192 <.L16>

000001b6 <Handle_EP_OUT>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000001bc <.LBB65>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000001c0 <.LBE65>:
{
	/* Select the OUT Endpoint */
	Endpoint_SelectEndpoint(ECHO_OUT_EPADDR);

	/* Check if Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
 1c0:	82 ff       	sbrs	r24, 2
 1c2:	18 c0       	rjmp	.+48     	; 0x1f4 <.L17>

000001c4 <.LBB67>:
				return ((UEINTX & (1 << RWAL)) ? true : false);
 1c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000001c8 <.LBE67>:
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 1c8:	85 ff       	sbrs	r24, 5
 1ca:	0f c0       	rjmp	.+30     	; 0x1ea <.L19>

000001cc <.LBB69>:
		{
			/* Read in the LED report from the host */
			// Envoi du mdp
			for (int i = 0; i < 10; i++)
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0

000001d0 <.L20>:
				return UEDATX;
 1d0:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

000001d4 <.LBE70>:
			{
				EP_Data[i] = Endpoint_Read_8();
 1d4:	fc 01       	movw	r30, r24
 1d6:	e5 5f       	subi	r30, 0xF5	; 245
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	20 83       	st	Z, r18

000001dc <.Loc.105>:
			for (int i = 0; i < 10; i++)
 1dc:	01 96       	adiw	r24, 0x01	; 1

000001de <.Loc.107>:
 1de:	8a 30       	cpi	r24, 0x0A	; 10
 1e0:	91 05       	cpc	r25, r1
 1e2:	b1 f7       	brne	.-20     	; 0x1d0 <.L20>

000001e4 <.LBE69>:
			}

			present = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1

000001e6 <.LVL17>:
 1e6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <present>

000001ea <.L19>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 1ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 1ee:	8b 77       	andi	r24, 0x7B	; 123
 1f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000001f4 <.L17>:
		}

		/* Handshake the OUT Endpoint - clear endpoint */
		Endpoint_ClearOUT();
	}
}
 1f4:	08 95       	ret

000001f6 <main>:
	CLKSEL0 = 0b00010101;   // sélection de l'horloge externe
 1f6:	85 e1       	ldi	r24, 0x15	; 21
 1f8:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>

000001fc <.Loc.120>:
	CLKSEL1 = 0b00001111;   // minimum de 8Mhz
 1fc:	8f e0       	ldi	r24, 0x0F	; 15
 1fe:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>

00000202 <.Loc.122>:
	CLKPR = 0b10000000;     // modification du diviseur d'horloge (CLKPCE=1)
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>

00000208 <.Loc.124>:
	CLKPR = 0;              // 0 pour pas de diviseur (diviseur de 1)
 208:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>

0000020c <.Loc.126>:
	DDRB = 0b01111111; // set all pins on port B as output except for PB7
 20c:	8f e7       	ldi	r24, 0x7F	; 127
 20e:	84 b9       	out	0x04, r24	; 4

00000210 <.Loc.128>:
	PORTB &= 0b10000000;
 210:	85 b1       	in	r24, 0x05	; 5
 212:	80 78       	andi	r24, 0x80	; 128
 214:	85 b9       	out	0x05, r24	; 5

00000216 <.Loc.130>:
	SetupHardware();
 216:	7e df       	rcall	.-260    	; 0x114 <SetupHardware>

00000218 <.LBB74>:
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 218:	78 94       	sei

0000021a <.L29>:
		Handle_EP_IN();
 21a:	9f df       	rcall	.-194    	; 0x15a <Handle_EP_IN>

0000021c <.LVL20>:
		Handle_EP_OUT();
 21c:	cc df       	rcall	.-104    	; 0x1b6 <Handle_EP_OUT>

0000021e <.LVL21>:
		USB_USBTask();
 21e:	c6 d3       	rcall	.+1932   	; 0x9ac <USB_USBTask>

00000220 <.LVL22>:
	for (;;)
 220:	fc cf       	rjmp	.-8      	; 0x21a <.L29>

00000222 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
 222:	9c 01       	movw	r18, r24
 224:	da 01       	movw	r26, r20

00000226 <.Loc.2>:
	const uint8_t  DescriptorType   = (wValue >> 8);
 226:	83 2f       	mov	r24, r19
 228:	99 27       	eor	r25, r25

0000022a <.LVL1>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	91 05       	cpc	r25, r1
 22e:	29 f1       	breq	.+74     	; 0x27a <.L6>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	91 05       	cpc	r25, r1
 234:	49 f0       	breq	.+18     	; 0x248 <.L3>
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	91 f4       	brne	.+36     	; 0x25e <.L8>
 23a:	82 e1       	ldi	r24, 0x12	; 18
 23c:	90 e0       	ldi	r25, 0x00	; 0

0000023e <.LVL2>:
 23e:	2a ec       	ldi	r18, 0xCA	; 202
 240:	30 e0       	ldi	r19, 0x00	; 0

00000242 <.L2>:
			}

			break;
	}

	*DescriptorAddress = Address;
 242:	2d 93       	st	X+, r18
 244:	3c 93       	st	X, r19

00000246 <.Loc.11>:
	return Size;
}
 246:	08 95       	ret

00000248 <.L3>:
			switch (DescriptorNumber)
 248:	c9 01       	movw	r24, r18

0000024a <.LVL5>:
 24a:	99 27       	eor	r25, r25
 24c:	21 30       	cpi	r18, 0x01	; 1
 24e:	61 f0       	breq	.+24     	; 0x268 <.L4>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	91 05       	cpc	r25, r1
 254:	79 f0       	breq	.+30     	; 0x274 <.L5>

00000256 <.LBB2>:
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 256:	e6 ea       	ldi	r30, 0xA6	; 166
 258:	f0 e0       	ldi	r31, 0x00	; 0

0000025a <.LBE2>:
 25a:	89 2b       	or	r24, r25
 25c:	39 f0       	breq	.+14     	; 0x26c <.L9>

0000025e <.L8>:
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	20 e0       	ldi	r18, 0x00	; 0

00000266 <.LVL6>:
 266:	ed cf       	rjmp	.-38     	; 0x242 <.L2>

00000268 <.L4>:
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 268:	ea e8       	ldi	r30, 0x8A	; 138
 26a:	f0 e0       	ldi	r31, 0x00	; 0

0000026c <.L9>:
 26c:	84 91       	lpm	r24, Z

0000026e <.LBE3>:
 26e:	90 e0       	ldi	r25, 0x00	; 0

00000270 <.LVL10>:
					Address = &ManufacturerString;
 270:	9f 01       	movw	r18, r30

00000272 <.LVL11>:
					break;
 272:	e7 cf       	rjmp	.-50     	; 0x242 <.L2>

00000274 <.L5>:
					Size    = pgm_read_byte(&ProductString.Header.Size);
 274:	e4 e7       	ldi	r30, 0x74	; 116
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	f9 cf       	rjmp	.-14     	; 0x26c <.L9>

0000027a <.L6>:
			Size    = sizeof(USB_Descriptor_Configuration_t);
 27a:	80 e2       	ldi	r24, 0x20	; 32
 27c:	90 e0       	ldi	r25, 0x00	; 0

0000027e <.LVL14>:
			Address = &ConfigurationDescriptor;
 27e:	2a ea       	ldi	r18, 0xAA	; 170
 280:	30 e0       	ldi	r19, 0x00	; 0

00000282 <.LVL15>:
 282:	df cf       	rjmp	.-66     	; 0x242 <.L2>

00000284 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 284:	fc 01       	movw	r30, r24
 286:	cb 01       	movw	r24, r22

00000288 <.LVL228>:
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 288:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <USB_ControlRequest+0x6>
 28c:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <USB_ControlRequest+0x7>

00000290 <.Loc.636>:
 290:	26 17       	cp	r18, r22
 292:	37 07       	cpc	r19, r23
 294:	90 f0       	brcs	.+36     	; 0x2ba <.L157>

00000296 <.Loc.637>:
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 296:	00 97       	sbiw	r24, 0x00	; 0
 298:	29 f4       	brne	.+10     	; 0x2a4 <.L146>

0000029a <.LBB342>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 29a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 29e:	2e 77       	andi	r18, 0x7E	; 126
 2a0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000002a4 <.L146>:
 2a4:	40 e0       	ldi	r20, 0x00	; 0

000002a6 <.L150>:
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 2a6:	00 97       	sbiw	r24, 0x00	; 0
 2a8:	51 f4       	brne	.+20     	; 0x2be <.L155>

000002aa <.Loc.645>:
 2aa:	41 11       	cpse	r20, r1
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <.L155>

000002ae <.L169>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000002b2 <.LBE344>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 2b2:	82 ff       	sbrs	r24, 2
 2b4:	30 c0       	rjmp	.+96     	; 0x316 <.L156>

000002b6 <.Loc.651>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret

000002ba <.L157>:
 2ba:	c9 01       	movw	r24, r18
 2bc:	f3 cf       	rjmp	.-26     	; 0x2a4 <.L146>

000002be <.L155>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 2be:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <USB_DeviceState>

000002c2 <.LVL233>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 2c2:	22 23       	and	r18, r18
 2c4:	a1 f1       	breq	.+104    	; 0x32e <.L161>

000002c6 <.Loc.657>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 2c6:	25 30       	cpi	r18, 0x05	; 5
 2c8:	a1 f1       	breq	.+104    	; 0x332 <.L162>

000002ca <.LBB347>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 2ca:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000002ce <.LBE347>:
		else if (Endpoint_IsSETUPReceived())
 2ce:	23 fd       	sbrc	r18, 3
 2d0:	2c c0       	rjmp	.+88     	; 0x32a <.L163>

000002d2 <.LBB349>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2d2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000002d6 <.LBE349>:
		else if (Endpoint_IsOUTReceived())
 2d6:	22 fd       	sbrc	r18, 2
 2d8:	ea cf       	rjmp	.-44     	; 0x2ae <.L169>

000002da <.LBB351>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 2da:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000002de <.LBE351>:
		if (Endpoint_IsINReady())
 2de:	20 ff       	sbrs	r18, 0
 2e0:	e2 cf       	rjmp	.-60     	; 0x2a6 <.L150>

000002e2 <.LBB353>:
					return UEBCLX;
 2e2:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 2e6:	30 e0       	ldi	r19, 0x00	; 0

000002e8 <.L151>:
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <.L152>

000002ec <.Loc.682>:
 2ec:	28 30       	cpi	r18, 0x08	; 8
 2ee:	31 05       	cpc	r19, r1
 2f0:	58 f0       	brcs	.+22     	; 0x308 <.L153>

000002f2 <.L152>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	28 30       	cpi	r18, 0x08	; 8
 2f6:	31 05       	cpc	r19, r1
 2f8:	09 f0       	breq	.+2      	; 0x2fc <.L154>
 2fa:	40 e0       	ldi	r20, 0x00	; 0

000002fc <.L154>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2fc:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000300 <.LVL237>:
 300:	2e 77       	andi	r18, 0x7E	; 126
 302:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000306 <.LVL238>:
				#else
					UEINTX &= ~(1 << TXINI);
				#endif
			}
 306:	cf cf       	rjmp	.-98     	; 0x2a6 <.L150>

00000308 <.L153>:
				TEMPLATE_TRANSFER_BYTE(DataStream);
 308:	41 91       	ld	r20, Z+

0000030a <.LBB358>:
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 30a:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

0000030e <.LBE358>:
				Length--;
 30e:	01 97       	sbiw	r24, 0x01	; 1

00000310 <.Loc.700>:
				BytesInEndpoint++;
 310:	2f 5f       	subi	r18, 0xFF	; 255
 312:	3f 4f       	sbci	r19, 0xFF	; 255

00000314 <.Loc.702>:
 314:	e9 cf       	rjmp	.-46     	; 0x2e8 <.L151>

00000316 <.L156>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 316:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>

0000031a <.LVL245>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 31a:	88 23       	and	r24, r24
 31c:	41 f0       	breq	.+16     	; 0x32e <.L161>

0000031e <.Loc.708>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 31e:	85 30       	cpi	r24, 0x05	; 5
 320:	41 f0       	breq	.+16     	; 0x332 <.L162>

00000322 <.LBB361>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 322:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000326 <.LBE361>:
		else if (Endpoint_IsSETUPReceived())
 326:	83 ff       	sbrs	r24, 3
 328:	c2 cf       	rjmp	.-124    	; 0x2ae <.L169>

0000032a <.L163>:
		  return ENDPOINT_RWCSTREAM_HostAborted;
 32a:	81 e0       	ldi	r24, 0x01	; 1

0000032c <.LBE363>:
}
 32c:	08 95       	ret

0000032e <.L161>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	08 95       	ret

00000332 <.L162>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	08 95       	ret

00000336 <Endpoint_Write_Control_PStream_LE>:
{
 336:	fc 01       	movw	r30, r24
 338:	cb 01       	movw	r24, r22

0000033a <.LVL293>:
	if (Length > USB_ControlRequest.wLength)
 33a:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <USB_ControlRequest+0x6>
 33e:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <USB_ControlRequest+0x7>

00000342 <.Loc.941>:
 342:	26 17       	cp	r18, r22
 344:	37 07       	cpc	r19, r23
 346:	90 f0       	brcs	.+36     	; 0x36c <.L253>

00000348 <.Loc.942>:
	else if (!(Length))
 348:	00 97       	sbiw	r24, 0x00	; 0
 34a:	29 f4       	brne	.+10     	; 0x356 <.L242>

0000034c <.LBB422>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 34c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 350:	2e 77       	andi	r18, 0x7E	; 126
 352:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000356 <.L242>:
 356:	40 e0       	ldi	r20, 0x00	; 0

00000358 <.L246>:
	while (Length || LastPacketFull)
 358:	00 97       	sbiw	r24, 0x00	; 0
 35a:	51 f4       	brne	.+20     	; 0x370 <.L251>

0000035c <.Loc.950>:
 35c:	41 11       	cpse	r20, r1
 35e:	08 c0       	rjmp	.+16     	; 0x370 <.L251>

00000360 <.L265>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 360:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000364 <.LBE424>:
	while (!(Endpoint_IsOUTReceived()))
 364:	82 ff       	sbrs	r24, 2
 366:	31 c0       	rjmp	.+98     	; 0x3ca <.L252>

00000368 <.Loc.956>:
	return ENDPOINT_RWCSTREAM_NoError;
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	08 95       	ret

0000036c <.L253>:
 36c:	c9 01       	movw	r24, r18
 36e:	f3 cf       	rjmp	.-26     	; 0x356 <.L242>

00000370 <.L251>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 370:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <USB_DeviceState>

00000374 <.LVL298>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 374:	22 23       	and	r18, r18
 376:	a9 f1       	breq	.+106    	; 0x3e2 <.L257>

00000378 <.Loc.962>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 378:	25 30       	cpi	r18, 0x05	; 5
 37a:	a9 f1       	breq	.+106    	; 0x3e6 <.L258>

0000037c <.LBB427>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 37c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000380 <.LBE427>:
		else if (Endpoint_IsSETUPReceived())
 380:	23 fd       	sbrc	r18, 3
 382:	2d c0       	rjmp	.+90     	; 0x3de <.L259>

00000384 <.LBB429>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 384:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000388 <.LBE429>:
		else if (Endpoint_IsOUTReceived())
 388:	22 fd       	sbrc	r18, 2
 38a:	ea cf       	rjmp	.-44     	; 0x360 <.L265>

0000038c <.LBB431>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 38c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000390 <.LBE431>:
		if (Endpoint_IsINReady())
 390:	20 ff       	sbrs	r18, 0
 392:	e2 cf       	rjmp	.-60     	; 0x358 <.L246>

00000394 <.LBB433>:
					return UEBCLX;
 394:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 398:	30 e0       	ldi	r19, 0x00	; 0

0000039a <.L247>:
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 39a:	00 97       	sbiw	r24, 0x00	; 0
 39c:	19 f0       	breq	.+6      	; 0x3a4 <.L248>

0000039e <.Loc.987>:
 39e:	28 30       	cpi	r18, 0x08	; 8
 3a0:	31 05       	cpc	r19, r1
 3a2:	58 f0       	brcs	.+22     	; 0x3ba <.L249>

000003a4 <.L248>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	28 30       	cpi	r18, 0x08	; 8
 3a8:	31 05       	cpc	r19, r1
 3aa:	09 f0       	breq	.+2      	; 0x3ae <.L250>
 3ac:	40 e0       	ldi	r20, 0x00	; 0

000003ae <.L250>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3ae:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000003b2 <.LVL302>:
 3b2:	2e 77       	andi	r18, 0x7E	; 126
 3b4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000003b8 <.LVL303>:
			}
 3b8:	cf cf       	rjmp	.-98     	; 0x358 <.L246>

000003ba <.L249>:
				TEMPLATE_TRANSFER_BYTE(DataStream);
 3ba:	44 91       	lpm	r20, Z

000003bc <.LBB439>:
				UEDATX = Data;
 3bc:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

000003c0 <.LBE439>:
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 3c0:	31 96       	adiw	r30, 0x01	; 1

000003c2 <.LVL307>:
				Length--;
 3c2:	01 97       	sbiw	r24, 0x01	; 1

000003c4 <.Loc.1010>:
				BytesInEndpoint++;
 3c4:	2f 5f       	subi	r18, 0xFF	; 255
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255

000003c8 <.Loc.1012>:
 3c8:	e8 cf       	rjmp	.-48     	; 0x39a <.L247>

000003ca <.L252>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3ca:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>

000003ce <.LVL311>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3ce:	88 23       	and	r24, r24
 3d0:	41 f0       	breq	.+16     	; 0x3e2 <.L257>

000003d2 <.Loc.1018>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3d2:	85 30       	cpi	r24, 0x05	; 5
 3d4:	41 f0       	breq	.+16     	; 0x3e6 <.L258>

000003d6 <.LBB442>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 3d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000003da <.LBE442>:
		else if (Endpoint_IsSETUPReceived())
 3da:	83 ff       	sbrs	r24, 3
 3dc:	c1 cf       	rjmp	.-126    	; 0x360 <.L265>

000003de <.L259>:
		  return ENDPOINT_RWCSTREAM_HostAborted;
 3de:	81 e0       	ldi	r24, 0x01	; 1

000003e0 <.LBE444>:
}
 3e0:	08 95       	ret

000003e2 <.L257>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	08 95       	ret

000003e6 <.L258>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 3e6:	83 e0       	ldi	r24, 0x03	; 3
 3e8:	08 95       	ret

000003ea <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 3ea:	98 2f       	mov	r25, r24

000003ec <.L2>:
 3ec:	95 30       	cpi	r25, 0x05	; 5
 3ee:	28 f0       	brcs	.+10     	; 0x3fa <.L7>

000003f0 <.LBB58>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3f0:	8f 70       	andi	r24, 0x0F	; 15

000003f2 <.LVL3>:
 3f2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000003f6 <.LBE58>:
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	08 95       	ret

000003fa <.L7>:
 3fa:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000003fe <.LBE49>:
			UECFG1XTemp = UECFG1XData;
 3fe:	24 2f       	mov	r18, r20

00000400 <.Loc.25>:
			UECFG0XTemp = UECFG0XData;
 400:	76 2f       	mov	r23, r22

00000402 <.Loc.26>:
			UEIENXTemp  = 0;
 402:	50 e0       	ldi	r21, 0x00	; 0

00000404 <.Loc.27>:
		if (EPNum == Number)
 404:	98 17       	cp	r25, r24
 406:	31 f0       	breq	.+12     	; 0x414 <.L3>

00000408 <.LVL7>:
			UECFG0XTemp = UECFG0X;
 408:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

0000040c <.LVL8>:
			UECFG1XTemp = UECFG1X;
 40c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

00000410 <.LVL9>:
			UEIENXTemp  = UEIENX;
 410:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

00000414 <.L3>:
		if (!(UECFG1XTemp & (1 << ALLOC)))
 414:	21 fd       	sbrc	r18, 1
 416:	02 c0       	rjmp	.+4      	; 0x41c <.L4>

00000418 <.L6>:
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 418:	9f 5f       	subi	r25, 0xFF	; 255

0000041a <.Loc.39>:
 41a:	e8 cf       	rjmp	.-48     	; 0x3ec <.L2>

0000041c <.L4>:
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 41c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 420:	3e 7f       	andi	r19, 0xFE	; 254
 422:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000426 <.LBE51>:
		UECFG1X &= ~(1 << ALLOC);
 426:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 42a:	3d 7f       	andi	r19, 0xFD	; 253
 42c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

00000430 <.LBB53>:
				UECONX |= (1 << EPEN);
 430:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 434:	31 60       	ori	r19, 0x01	; 1
 436:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

0000043a <.LBE53>:
		UECFG0X = UECFG0XTemp;
 43a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

0000043e <.Loc.52>:
		UECFG1X = UECFG1XTemp;
 43e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

00000442 <.Loc.54>:
		UEIENX  = UEIENXTemp;
 442:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

00000446 <.LBB55>:
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 446:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

0000044a <.LBE55>:
		if (!(Endpoint_IsConfigured()))
 44a:	27 fd       	sbrc	r18, 7
 44c:	e5 cf       	rjmp	.-54     	; 0x418 <.L6>

0000044e <.Loc.62>:
		  return false;
 44e:	80 e0       	ldi	r24, 0x00	; 0

00000450 <.LBE57>:
#endif
}
 450:	08 95       	ret

00000452 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 452:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest>
 456:	87 ff       	sbrs	r24, 7
 458:	13 c0       	rjmp	.+38     	; 0x480 <.L27>

0000045a <.L26>:
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 45a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000045e <.LBE81>:
	{
		while (!(Endpoint_IsOUTReceived()))
 45e:	82 ff       	sbrs	r24, 2
 460:	06 c0       	rjmp	.+12     	; 0x46e <.L29>

00000462 <.LBB83>:
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 462:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 466:	8b 77       	andi	r24, 0x7B	; 123

00000468 <.L38>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 468:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000046c <.Loc.156>:
			}
 46c:	04 c0       	rjmp	.+8      	; 0x476 <.L25>

0000046e <.L29>:
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 46e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>

00000472 <.Loc.159>:
 472:	81 11       	cpse	r24, r1
 474:	f2 cf       	rjmp	.-28     	; 0x45a <.L26>

00000476 <.L25>:
			  return;
		}

		Endpoint_ClearIN();
	}
}
 476:	08 95       	ret

00000478 <.L30>:
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 478:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>

0000047c <.Loc.163>:
 47c:	88 23       	and	r24, r24
 47e:	d9 f3       	breq	.-10     	; 0x476 <.L25>

00000480 <.L27>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 480:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000484 <.LBE88>:
		while (!(Endpoint_IsINReady()))
 484:	80 ff       	sbrs	r24, 0
 486:	f8 cf       	rjmp	.-16     	; 0x478 <.L30>

00000488 <.LBB90>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 488:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 48c:	8e 77       	andi	r24, 0x7E	; 126
 48e:	ec cf       	rjmp	.-40     	; 0x468 <.L38>

00000490 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 490:	40 d0       	rcall	.+128    	; 0x512 <USB_INT_DisableAllInterrupts>

00000492 <.LVL2>:
	USB_INT_ClearAllInterrupts();
 492:	42 d0       	rcall	.+132    	; 0x518 <USB_INT_ClearAllInterrupts>

00000494 <.LBB62>:
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 494:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 498:	8f 77       	andi	r24, 0x7F	; 127
 49a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

0000049e <.Loc.31>:
				USBCON |=  (1 << USBE);
 49e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 4a2:	80 68       	ori	r24, 0x80	; 128
 4a4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

000004a8 <.LBB64>:
				USBCON &= ~(1 << FRZCLK);
 4a8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 4ac:	8f 7d       	andi	r24, 0xDF	; 223
 4ae:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

000004b2 <.LBB66>:
				PLLCSR = USB_PLL_PSC;
 4b2:	19 bc       	out	0x29, r1	; 41

000004b4 <.Loc.43>:
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	89 bd       	out	0x29, r24	; 41

000004b8 <.L3>:

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 4b8:	09 b4       	in	r0, 0x29	; 41
 4ba:	00 fe       	sbrs	r0, 0
 4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <.L3>

000004be <.LBB70>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 4be:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <USB_DeviceState>

000004c2 <.Loc.54>:
	USB_Device_ConfigurationNumber  = 0;
 4c2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Device_ConfigurationNumber>

000004c6 <.Loc.56>:

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 4c6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_Device_RemoteWakeupEnabled>

000004ca <.Loc.58>:
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 4ca:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_Device_CurrentlySelfPowered>

000004ce <.LBB72>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
 4ce:	42 e0       	ldi	r20, 0x02	; 2
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	8a df       	rcall	.-236    	; 0x3ea <Endpoint_ConfigureEndpoint_Prv>

000004d6 <.LBB76>:
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 4d6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 4da:	8e 7f       	andi	r24, 0xFE	; 254
 4dc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

000004e0 <.LBB78>:
						UDIEN  |= (1 << SUSPE);
 4e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000004ea <.LBB80>:
						UDIEN  |= (1 << EORSTE);
 4ea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 4ee:	88 60       	ori	r24, 0x08	; 8
 4f0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000004f4 <.LBB82>:
				UDCON  &= ~(1 << DETACH);
 4f4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
 4f8:	8e 7f       	andi	r24, 0xFE	; 254
 4fa:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>

000004fe <.LBE82>:
}
 4fe:	08 95       	ret

00000500 <USB_Init>:
				REGCR  &= ~(1 << REGDIS);
 500:	e3 e6       	ldi	r30, 0x63	; 99
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	8e 7f       	andi	r24, 0xFE	; 254
 508:	80 83       	st	Z, r24

0000050a <.LBE86>:
	USB_IsInitialized = true;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_IsInitialized>

00000510 <.Loc.110>:
	USB_ResetInterface();
 510:	bf cf       	rjmp	.-130    	; 0x490 <USB_ResetInterface>

00000512 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 512:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000516 <.Loc.3>:
	#endif
}
 516:	08 95       	ret

00000518 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 518:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

0000051c <.Loc.7>:
	#endif
}
 51c:	08 95       	ret

0000051e <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 51e:	1f 92       	push	r1

00000520 <.LCFI0>:
 520:	0f 92       	push	r0

00000522 <.LCFI1>:
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
 528:	2f 93       	push	r18

0000052a <.LCFI2>:
 52a:	3f 93       	push	r19

0000052c <.LCFI3>:
 52c:	4f 93       	push	r20

0000052e <.LCFI4>:
 52e:	5f 93       	push	r21

00000530 <.LCFI5>:
 530:	6f 93       	push	r22

00000532 <.LCFI6>:
 532:	7f 93       	push	r23

00000534 <.LCFI7>:
 534:	8f 93       	push	r24

00000536 <.LCFI8>:
 536:	9f 93       	push	r25

00000538 <.LCFI9>:
 538:	af 93       	push	r26

0000053a <.LCFI10>:
 53a:	bf 93       	push	r27

0000053c <.LCFI11>:
 53c:	ef 93       	push	r30

0000053e <.LCFI12>:
 53e:	ff 93       	push	r31

00000540 <.LBB76>:
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 540:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000544 <.LBE76>:
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 544:	82 ff       	sbrs	r24, 2
 546:	0a c0       	rjmp	.+20     	; 0x55c <.L4>

00000548 <.LBB78>:
						return (UDIEN  & (1 << SOFE));
 548:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

0000054c <.LBE78>:
 54c:	82 ff       	sbrs	r24, 2
 54e:	06 c0       	rjmp	.+12     	; 0x55c <.L4>

00000550 <.LBB80>:
						UDINT  &= ~(1 << SOFI);
 550:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 554:	8b 7f       	andi	r24, 0xFB	; 251
 556:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

0000055a <.LBE80>:
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 55a:	27 d2       	rcall	.+1102   	; 0x9aa <USB_Event_Stub>

0000055c <.L4>:
						return (UDINT  & (1 << SUSPI));
 55c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000560 <.LBE82>:
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 560:	80 ff       	sbrs	r24, 0
 562:	17 c0       	rjmp	.+46     	; 0x592 <.L5>

00000564 <.LBB84>:
						return (UDIEN  & (1 << SUSPE));
 564:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000568 <.LBE84>:
 568:	80 ff       	sbrs	r24, 0
 56a:	13 c0       	rjmp	.+38     	; 0x592 <.L5>

0000056c <.LBB86>:
						UDIEN  &= ~(1 << SUSPE);
 56c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 570:	8e 7f       	andi	r24, 0xFE	; 254
 572:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000576 <.LBB88>:
						UDIEN  |= (1 << WAKEUPE);
 576:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 57a:	80 61       	ori	r24, 0x10	; 16
 57c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000580 <.LBB90>:
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 580:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 584:	80 62       	ori	r24, 0x20	; 32
 586:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

0000058a <.LBB92>:
				PLLCSR = 0;
 58a:	19 bc       	out	0x29, r1	; 41

0000058c <.LBE92>:

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 58c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <USB_DeviceState>

00000590 <.Loc.68>:
		EVENT_USB_Device_Disconnect();
 590:	da dd       	rcall	.-1100   	; 0x146 <EVENT_USB_Device_Disconnect>

00000592 <.L5>:
						return (UDINT  & (1 << WAKEUPI));
 592:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000596 <.LBE94>:
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 596:	84 ff       	sbrs	r24, 4
 598:	27 c0       	rjmp	.+78     	; 0x5e8 <.L6>

0000059a <.LBB96>:
						return (UDIEN  & (1 << WAKEUPE));
 59a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

0000059e <.LBE96>:
 59e:	84 ff       	sbrs	r24, 4
 5a0:	23 c0       	rjmp	.+70     	; 0x5e8 <.L6>

000005a2 <.LBB98>:
				PLLCSR = USB_PLL_PSC;
 5a2:	19 bc       	out	0x29, r1	; 41

000005a4 <.Loc.87>:
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	89 bd       	out	0x29, r24	; 41

000005a8 <.L7>:
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 5a8:	09 b4       	in	r0, 0x29	; 41
 5aa:	00 fe       	sbrs	r0, 0
 5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <.L7>

000005ae <.LBB102>:
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 5ae:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 5b2:	8f 7d       	andi	r24, 0xDF	; 223
 5b4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

000005b8 <.LBB104>:
						UDINT  &= ~(1 << WAKEUPI);
 5b8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 5bc:	8f 7e       	andi	r24, 0xEF	; 239
 5be:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

000005c2 <.LBB106>:
						UDIEN  &= ~(1 << WAKEUPE);
 5c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 5c6:	8f 7e       	andi	r24, 0xEF	; 239
 5c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000005cc <.LBB108>:
						UDIEN  |= (1 << SUSPE);
 5cc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 5d0:	81 60       	ori	r24, 0x01	; 1
 5d2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000005d6 <.LBE108>:
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 5d6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_Device_ConfigurationNumber>
 5da:	88 23       	and	r24, r24
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <.Loc.121>

000005de <L0^A>:
 5de:	40 c0       	rjmp	.+128    	; 0x660 <.L8>

000005e0 <.Loc.121>:
		  USB_DeviceState = DEVICE_STATE_Configured;
 5e0:	84 e0       	ldi	r24, 0x04	; 4

000005e2 <.L10>:
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 5e2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_DeviceState>

000005e6 <.Loc.124>:

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 5e6:	ae dd       	rcall	.-1188   	; 0x144 <EVENT_USB_Device_Connect>

000005e8 <.L6>:
						return (UDINT  & (1 << EORSTI));
 5e8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

000005ec <.LBE110>:
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 5ec:	83 ff       	sbrs	r24, 3
 5ee:	27 c0       	rjmp	.+78     	; 0x63e <.L3>

000005f0 <.LBB112>:
						return (UDIEN  & (1 << EORSTE));
 5f0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000005f4 <.LBE112>:
 5f4:	83 ff       	sbrs	r24, 3
 5f6:	23 c0       	rjmp	.+70     	; 0x63e <.L3>

000005f8 <.LBB114>:
						UDINT  &= ~(1 << EORSTI);
 5f8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 5fc:	87 7f       	andi	r24, 0xF7	; 247
 5fe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000602 <.LBE114>:
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_DeviceState>

00000608 <.Loc.147>:
		USB_Device_ConfigurationNumber = 0;
 608:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Device_ConfigurationNumber>

0000060c <.LBB116>:
						UDINT  &= ~(1 << SUSPI);
 60c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 610:	8e 7f       	andi	r24, 0xFE	; 254
 612:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000616 <.LBB118>:
						UDIEN  &= ~(1 << SUSPE);
 616:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 61a:	8e 7f       	andi	r24, 0xFE	; 254
 61c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000620 <.LBB120>:
						UDIEN  |= (1 << WAKEUPE);
 620:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 624:	80 61       	ori	r24, 0x10	; 16
 626:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

0000062a <.LBB122>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 62a:	42 e0       	ldi	r20, 0x02	; 2
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	dc de       	rcall	.-584    	; 0x3ea <Endpoint_ConfigureEndpoint_Prv>

00000632 <.LBB126>:
						UEIENX |= (1 << RXSTPE);
 632:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 636:	88 60       	ori	r24, 0x08	; 8
 638:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

0000063c <.LBE126>:

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 63c:	b6 d1       	rcall	.+876    	; 0x9aa <USB_Event_Stub>

0000063e <.L3>:
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	bf 91       	pop	r27
 644:	af 91       	pop	r26
 646:	9f 91       	pop	r25
 648:	8f 91       	pop	r24
 64a:	7f 91       	pop	r23
 64c:	6f 91       	pop	r22
 64e:	5f 91       	pop	r21
 650:	4f 91       	pop	r20
 652:	3f 91       	pop	r19
 654:	2f 91       	pop	r18
 656:	0f 90       	pop	r0
 658:	0f be       	out	0x3f, r0	; 63
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti

00000660 <.L8>:
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 660:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

00000664 <.LBE128>:
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 664:	87 fd       	sbrc	r24, 7
 666:	02 c0       	rjmp	.+4      	; 0x66c <.L12>
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	bb cf       	rjmp	.-138    	; 0x5e2 <.L10>

0000066c <.L12>:
 66c:	83 e0       	ldi	r24, 0x03	; 3
 66e:	b9 cf       	rjmp	.-142    	; 0x5e2 <.L10>

00000670 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 670:	1f 92       	push	r1

00000672 <.LCFI14>:
 672:	0f 92       	push	r0

00000674 <.LCFI15>:
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	2f 93       	push	r18

0000067c <.LCFI16>:
 67c:	3f 93       	push	r19

0000067e <.LCFI17>:
 67e:	4f 93       	push	r20

00000680 <.LCFI18>:
 680:	5f 93       	push	r21

00000682 <.LCFI19>:
 682:	6f 93       	push	r22

00000684 <.LCFI20>:
 684:	7f 93       	push	r23

00000686 <.LCFI21>:
 686:	8f 93       	push	r24

00000688 <.LCFI22>:
 688:	9f 93       	push	r25

0000068a <.LCFI23>:
 68a:	af 93       	push	r26

0000068c <.LCFI24>:
 68c:	bf 93       	push	r27

0000068e <.LCFI25>:
 68e:	cf 93       	push	r28

00000690 <.LCFI26>:
 690:	df 93       	push	r29

00000692 <.LCFI27>:
 692:	ef 93       	push	r30

00000694 <.LCFI28>:
 694:	ff 93       	push	r31

00000696 <.LBB130>:
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 696:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000069a <.Loc.202>:
 69a:	df 70       	andi	r29, 0x0F	; 15

0000069c <.LBB132>:
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 69c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

000006a0 <.Loc.206>:
 6a0:	c8 2f       	mov	r28, r24
 6a2:	c1 70       	andi	r28, 0x01	; 1
 6a4:	80 fd       	sbrc	r24, 0
 6a6:	c0 e8       	ldi	r28, 0x80	; 128

000006a8 <.LBB135>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6a8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000006ac <.LBB137>:
						UEIENX &= ~(1 << RXSTPE);
 6ac:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 6b0:	87 7f       	andi	r24, 0xF7	; 247
 6b2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

000006b6 <.LBB139>:
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 6b6:	78 94       	sei

000006b8 <.LBE139>:
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 6b8:	1e d0       	rcall	.+60     	; 0x6f6 <USB_Device_ProcessControlRequest>

000006ba <.LBB141>:
 6ba:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000006be <.LBB143>:
						UEIENX |= (1 << RXSTPE);
 6be:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 6c2:	88 60       	ori	r24, 0x08	; 8
 6c4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

000006c8 <.LBB145>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 6c8:	cd 2b       	or	r28, r29

000006ca <.LBB149>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6ca:	cf 70       	andi	r28, 0x0F	; 15

000006cc <.LVL41>:
 6cc:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000006d0 <.LBE149>:

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 6f6:	1f 93       	push	r17

000006f8 <.LCFI0>:
 6f8:	cf 93       	push	r28

000006fa <.LCFI1>:
 6fa:	df 93       	push	r29

000006fc <.LCFI2>:
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62

00000700 <.LCFI3>:
 700:	aa 97       	sbiw	r28, 0x2a	; 42

00000702 <.LCFI4>:
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61

0000070c <.LBB172>:
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 70c:	8a e1       	ldi	r24, 0x1A	; 26
 70e:	91 e0       	ldi	r25, 0x01	; 1

00000710 <.L2>:

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 710:	fc 01       	movw	r30, r24

00000712 <.Loc.7>:
 712:	01 96       	adiw	r24, 0x01	; 1

00000714 <.LBB173>:
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 714:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

00000718 <.LBE173>:
 718:	20 83       	st	Z, r18

0000071a <.Loc.12>:
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 71a:	21 e0       	ldi	r18, 0x01	; 1
 71c:	82 32       	cpi	r24, 0x22	; 34
 71e:	92 07       	cpc	r25, r18
 720:	b9 f7       	brne	.-18     	; 0x710 <.L2>

00000722 <.LBE175>:
	#endif

	EVENT_USB_Device_ControlRequest();
 722:	1a dd       	rcall	.-1484   	; 0x158 <EVENT_USB_Device_ControlRequest>

00000724 <.LBB176>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 724:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000728 <.LBE176>:

	if (Endpoint_IsSETUPReceived())
 728:	83 ff       	sbrs	r24, 3
 72a:	10 c0       	rjmp	.+32     	; 0x74c <.L3>

0000072c <.LBB178>:
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 72c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest>

00000730 <.LVL5>:

		switch (USB_ControlRequest.bRequest)
 730:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <USB_ControlRequest+0x1>

00000734 <.Loc.25>:
 734:	95 30       	cpi	r25, 0x05	; 5
 736:	09 f4       	brne	.+2      	; 0x73a <L0^A+0x2>

00000738 <L0^A>:
 738:	c2 c0       	rjmp	.+388    	; 0x8be <.L4>
 73a:	00 f5       	brcc	.+64     	; 0x77c <.L5>
 73c:	29 2f       	mov	r18, r25
 73e:	2d 7f       	andi	r18, 0xFD	; 253
 740:	21 30       	cpi	r18, 0x01	; 1
 742:	09 f4       	brne	.+2      	; 0x746 <L0^A+0x2>

00000744 <L0^A>:
 744:	89 c0       	rjmp	.+274    	; 0x858 <.L6>
 746:	99 23       	and	r25, r25
 748:	09 f4       	brne	.+2      	; 0x74c <.L3>

0000074a <L0^A>:
 74a:	5e c0       	rjmp	.+188    	; 0x808 <.L7>

0000074c <.L3>:
 74c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000750 <.LBE276>:
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 750:	83 ff       	sbrs	r24, 3
 752:	0a c0       	rjmp	.+20     	; 0x768 <.L1>

00000754 <.LBB278>:
				UEINTX &= ~(1 << RXSTPI);
 754:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 758:	87 7f       	andi	r24, 0xF7	; 247
 75a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000075e <.LBB280>:
				UECONX |= (1 << STALLRQ);
 75e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 762:	80 62       	ori	r24, 0x20	; 32
 764:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000768 <.L1>:
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 768:	aa 96       	adiw	r28, 0x2a	; 42
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	f8 94       	cli
 76e:	de bf       	out	0x3e, r29	; 62
 770:	0f be       	out	0x3f, r0	; 63
 772:	cd bf       	out	0x3d, r28	; 61
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	1f 91       	pop	r17
 77a:	08 95       	ret

0000077c <.L5>:
		switch (USB_ControlRequest.bRequest)
 77c:	98 30       	cpi	r25, 0x08	; 8
 77e:	09 f4       	brne	.+2      	; 0x782 <L0^A+0x2>

00000780 <L0^A>:
 780:	d5 c0       	rjmp	.+426    	; 0x92c <.L8>
 782:	99 30       	cpi	r25, 0x09	; 9
 784:	09 f4       	brne	.+2      	; 0x788 <L0^A+0x2>

00000786 <L0^A>:
 786:	df c0       	rjmp	.+446    	; 0x946 <.L9>
 788:	96 30       	cpi	r25, 0x06	; 6
 78a:	01 f7       	brne	.-64     	; 0x74c <.L3>

0000078c <.Loc.42>:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 78c:	80 58       	subi	r24, 0x80	; 128

0000078e <.LVL8>:
 78e:	82 30       	cpi	r24, 0x02	; 2
 790:	e8 f6       	brcc	.-70     	; 0x74c <.L3>

00000792 <.LBB179>:
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 792:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x2>
 796:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <USB_ControlRequest+0x3>

0000079a <.Loc.51>:
 79a:	8c 3d       	cpi	r24, 0xDC	; 220
 79c:	23 e0       	ldi	r18, 0x03	; 3
 79e:	92 07       	cpc	r25, r18
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <.LBB181>

000007a2 <L0^A>:
 7a2:	af c0       	rjmp	.+350    	; 0x902 <.L22>

000007a4 <.LBB181>:
	SignatureDescriptor.Header.Type = DTYPE_String;
 7a4:	83 e0       	ldi	r24, 0x03	; 3
 7a6:	8a 83       	std	Y+2, r24	; 0x02

000007a8 <.Loc.57>:
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 7a8:	8a e2       	ldi	r24, 0x2A	; 42
 7aa:	89 83       	std	Y+1, r24	; 0x01

000007ac <.LBB183>:
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 7ac:	4f b7       	in	r20, 0x3f	; 63

000007ae <.LBB187>:
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 7ae:	f8 94       	cli

000007b0 <.LBB189>:
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 7b0:	de 01       	movw	r26, r28
 7b2:	13 96       	adiw	r26, 0x03	; 3

000007b4 <.Loc.79>:
 7b4:	20 e0       	ldi	r18, 0x00	; 0

000007b6 <.LBE189>:
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 7b6:	3e e0       	ldi	r19, 0x0E	; 14

000007b8 <.LBB190>:
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 7b8:	51 e2       	ldi	r21, 0x21	; 33

000007ba <.L26>:
 7ba:	e3 2f       	mov	r30, r19
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 7c2:	e4 91       	lpm	r30, Z

000007c4 <.LBE192>:

					if (SerialCharNum & 0x01)
 7c4:	20 ff       	sbrs	r18, 0
 7c6:	03 c0       	rjmp	.+6      	; 0x7ce <.L23>

000007c8 <.Loc.90>:
					{
						SerialByte >>= 4;
 7c8:	e2 95       	swap	r30

000007ca <.LVL14>:
 7ca:	ef 70       	andi	r30, 0x0F	; 15

000007cc <.LVL15>:
						SigReadAddress++;
 7cc:	3f 5f       	subi	r19, 0xFF	; 255

000007ce <.L23>:
					}

					SerialByte &= 0x0F;
 7ce:	ef 70       	andi	r30, 0x0F	; 15

000007d0 <.Loc.97>:

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 7d0:	8e 2f       	mov	r24, r30
 7d2:	90 e0       	ldi	r25, 0x00	; 0

000007d4 <.Loc.98>:
 7d4:	ea 30       	cpi	r30, 0x0A	; 10
 7d6:	08 f4       	brcc	.+2      	; 0x7da <.Loc.99>

000007d8 <L0^A>:
 7d8:	92 c0       	rjmp	.+292    	; 0x8fe <.L24>

000007da <.Loc.99>:
 7da:	c7 96       	adiw	r24, 0x37	; 55

000007dc <.L25>:
 7dc:	8d 93       	st	X+, r24
 7de:	9d 93       	st	X+, r25

000007e0 <.LBE190>:
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 7e0:	2f 5f       	subi	r18, 0xFF	; 255

000007e2 <.Loc.103>:
 7e2:	24 31       	cpi	r18, 0x14	; 20
 7e4:	51 f7       	brne	.-44     	; 0x7ba <.L26>

000007e6 <.LBB195>:
				SREG = GlobalIntState;
 7e6:	4f bf       	out	0x3f, r20	; 63

000007e8 <.LBB199>:
				UEINTX &= ~(1 << RXSTPI);
 7e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 7ec:	87 7f       	andi	r24, 0xF7	; 247
 7ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000007f2 <.LBE199>:
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 7f2:	6a e2       	ldi	r22, 0x2A	; 42
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	ce 01       	movw	r24, r28
 7f8:	01 96       	adiw	r24, 0x01	; 1
 7fa:	44 dd       	rcall	.-1400   	; 0x284 <Endpoint_Write_Control_Stream_LE>

000007fc <.L61>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 800:	8b 77       	andi	r24, 0x7B	; 123
 802:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000806 <.LBE205>:
 806:	a2 cf       	rjmp	.-188    	; 0x74c <.L3>

00000808 <.L7>:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 808:	80 38       	cpi	r24, 0x80	; 128
 80a:	99 f0       	breq	.+38     	; 0x832 <.L11>

0000080c <.Loc.130>:
 80c:	82 38       	cpi	r24, 0x82	; 130
 80e:	09 f0       	breq	.+2      	; 0x812 <.LBB211>

00000810 <L0^A>:
 810:	9d cf       	rjmp	.-198    	; 0x74c <.L3>

00000812 <.LBB211>:
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 812:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_ControlRequest+0x4>

00000816 <.LVL25>:
 816:	8f 70       	andi	r24, 0x0F	; 15

00000818 <.LVL26>:

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 818:	85 30       	cpi	r24, 0x05	; 5
 81a:	08 f0       	brcs	.+2      	; 0x81e <.LBB214>

0000081c <L0^A>:
 81c:	97 cf       	rjmp	.-210    	; 0x74c <.L3>

0000081e <.LBB214>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 81e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000822 <.LBB216>:
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 822:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000826 <.LVL29>:
 826:	85 fb       	bst	r24, 5
 828:	88 27       	eor	r24, r24
 82a:	80 f9       	bld	r24, 0

0000082c <.LBB218>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 82c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000830 <.LVL31>:
			}
 830:	06 c0       	rjmp	.+12     	; 0x83e <.L13>

00000832 <.L11>:
	uint8_t CurrentStatus = 0;
 832:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_CurrentlySelfPowered>

00000836 <.LVL33>:
			if (USB_Device_RemoteWakeupEnabled)
 836:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <USB_Device_RemoteWakeupEnabled>
 83a:	91 11       	cpse	r25, r1

0000083c <.Loc.161>:
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 83c:	82 60       	ori	r24, 0x02	; 2

0000083e <.L13>:
				UEINTX &= ~(1 << RXSTPI);
 83e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 842:	97 7f       	andi	r25, 0xF7	; 247
 844:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000848 <.LBB222>:
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 848:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

0000084c <.Loc.171>:
				UEDATX = (Data >> 8);
 84c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

00000850 <.L62>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 850:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 854:	8e 77       	andi	r24, 0x7E	; 126
 856:	a5 c0       	rjmp	.+330    	; 0x9a2 <.L60>

00000858 <.L6>:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 858:	88 23       	and	r24, r24
 85a:	09 f4       	brne	.+2      	; 0x85e <.Loc.185>

0000085c <L0^A>:
 85c:	92 c0       	rjmp	.+292    	; 0x982 <.L14>

0000085e <.Loc.185>:
 85e:	82 30       	cpi	r24, 0x02	; 2
 860:	09 f0       	breq	.+2      	; 0x864 <.LBB235>

00000862 <L0^A>:
 862:	74 cf       	rjmp	.-280    	; 0x74c <.L3>

00000864 <.LBB235>:
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 864:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x2>

00000868 <.LVL38>:
 868:	81 11       	cpse	r24, r1
 86a:	96 c0       	rjmp	.+300    	; 0x998 <.L17>

0000086c <.LBB237>:
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 86c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_ControlRequest+0x4>
 870:	8f 70       	andi	r24, 0x0F	; 15

00000872 <.LVL39>:

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 872:	2f ef       	ldi	r18, 0xFF	; 255
 874:	28 0f       	add	r18, r24

00000876 <.Loc.196>:
 876:	24 30       	cpi	r18, 0x04	; 4
 878:	08 f0       	brcs	.+2      	; 0x87c <.LBB238>

0000087a <L0^A>:
 87a:	68 cf       	rjmp	.-304    	; 0x74c <.L3>

0000087c <.LBB238>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 87c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000880 <.LBB240>:
				return ((UECONX & (1 << EPEN)) ? true : false);
 880:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000884 <.LBE240>:
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 884:	20 ff       	sbrs	r18, 0
 886:	88 c0       	rjmp	.+272    	; 0x998 <.L17>

00000888 <.Loc.207>:
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 888:	93 30       	cpi	r25, 0x03	; 3
 88a:	31 f4       	brne	.+12     	; 0x898 <.L19>

0000088c <.LBB242>:
				UECONX |= (1 << STALLRQ);
 88c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000890 <.LVL42>:
 890:	80 62       	ori	r24, 0x20	; 32

00000892 <.L59>:
				UECONX |= (1 << RSTDT);
 892:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000896 <.Loc.216>:
			}
 896:	80 c0       	rjmp	.+256    	; 0x998 <.L17>

00000898 <.L19>:
				UECONX |= (1 << STALLRQC);
 898:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 89c:	90 61       	ori	r25, 0x10	; 16
 89e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

000008a2 <.LBB249>:
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 8a2:	21 e0       	ldi	r18, 0x01	; 1
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <.L2^B1>

000008a8 <.L1^B1>:
 8a8:	22 0f       	add	r18, r18

000008aa <.L2^B1>:
 8aa:	8a 95       	dec	r24
 8ac:	ea f7       	brpl	.-6      	; 0x8a8 <.L1^B1>

000008ae <.Loc.226>:
 8ae:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>

000008b2 <.Loc.227>:
				UERST = 0;
 8b2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>

000008b6 <.LBB251>:
				UECONX |= (1 << RSTDT);
 8b6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

000008ba <.LVL47>:
 8ba:	88 60       	ori	r24, 0x08	; 8
 8bc:	ea cf       	rjmp	.-44     	; 0x892 <.L59>

000008be <.L4>:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 8be:	81 11       	cpse	r24, r1
 8c0:	45 cf       	rjmp	.-374    	; 0x74c <.L3>

000008c2 <.LBB257>:
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 8c2:	10 91 1c 01 	lds	r17, 0x011C	; 0x80011c <USB_ControlRequest+0x2>
 8c6:	1f 77       	andi	r17, 0x7F	; 127

000008c8 <.LBB259>:
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 8c8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

000008cc <.LVL50>:
 8cc:	80 78       	andi	r24, 0x80	; 128

000008ce <.Loc.247>:
 8ce:	81 2b       	or	r24, r17

000008d0 <.Loc.248>:
 8d0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

000008d4 <.LBB261>:
				UEINTX &= ~(1 << RXSTPI);
 8d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 8d8:	87 7f       	andi	r24, 0xF7	; 247
 8da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000008de <.LBE261>:
	Endpoint_ClearStatusStage();
 8de:	b9 dd       	rcall	.-1166   	; 0x452 <Endpoint_ClearStatusStage>

000008e0 <.L20>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000008e4 <.LBE263>:
	while (!(Endpoint_IsINReady()));
 8e4:	80 ff       	sbrs	r24, 0
 8e6:	fc cf       	rjmp	.-8      	; 0x8e0 <.L20>

000008e8 <.LBB265>:
				UDADDR |= (1 << ADDEN);
 8e8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 8ec:	80 68       	ori	r24, 0x80	; 128
 8ee:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

000008f2 <.LBE265>:
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	11 11       	cpse	r17, r1
 8f6:	83 e0       	ldi	r24, 0x03	; 3
 8f8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_DeviceState>

000008fc <.Loc.270>:
}
 8fc:	27 cf       	rjmp	.-434    	; 0x74c <.L3>

000008fe <.L24>:
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 8fe:	c0 96       	adiw	r24, 0x30	; 48

00000900 <.LVL56>:
 900:	6d cf       	rjmp	.-294    	; 0x7dc <.L25>

00000902 <.L22>:
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 902:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <USB_ControlRequest+0x4>
 906:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <USB_ControlRequest+0x5>
 90a:	ae 01       	movw	r20, r28
 90c:	4f 5f       	subi	r20, 0xFF	; 255
 90e:	5f 4f       	sbci	r21, 0xFF	; 255
 910:	88 dc       	rcall	.-1776   	; 0x222 <CALLBACK_USB_GetDescriptor>

00000912 <.LVL58>:
 912:	bc 01       	movw	r22, r24

00000914 <.LVL59>:
 914:	89 2b       	or	r24, r25
 916:	09 f4       	brne	.+2      	; 0x91a <.LBB208>

00000918 <L0^A>:
 918:	19 cf       	rjmp	.-462    	; 0x74c <.L3>

0000091a <.LBB208>:
				UEINTX &= ~(1 << RXSTPI);
 91a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 91e:	87 7f       	andi	r24, 0xF7	; 247
 920:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000924 <.LBE208>:
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	9a 81       	ldd	r25, Y+2	; 0x02
 928:	06 dd       	rcall	.-1524   	; 0x336 <Endpoint_Write_Control_PStream_LE>

0000092a <.LVL60>:
 92a:	68 cf       	rjmp	.-304    	; 0x7fc <.L61>

0000092c <.L8>:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 92c:	80 38       	cpi	r24, 0x80	; 128
 92e:	09 f0       	breq	.+2      	; 0x932 <.LBB230>

00000930 <L0^A>:
 930:	0d cf       	rjmp	.-486    	; 0x74c <.L3>

00000932 <.LBB230>:
 932:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000936 <.LVL62>:
 936:	87 7f       	andi	r24, 0xF7	; 247
 938:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000093c <.LBE230>:
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 93c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_Device_ConfigurationNumber>

00000940 <.LBB232>:
				UEDATX = Data;
 940:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 944:	85 cf       	rjmp	.-246    	; 0x850 <.L62>

00000946 <.L9>:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 946:	81 11       	cpse	r24, r1
 948:	01 cf       	rjmp	.-510    	; 0x74c <.L3>

0000094a <.LBB269>:
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 94a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <USB_ControlRequest+0x2>
 94e:	92 30       	cpi	r25, 0x02	; 2
 950:	08 f0       	brcs	.+2      	; 0x954 <.LBB271>

00000952 <L0^A>:
 952:	fc ce       	rjmp	.-520    	; 0x74c <.L3>

00000954 <.LBB271>:
				UEINTX &= ~(1 << RXSTPI);
 954:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000958 <.LVL66>:
 958:	87 7f       	andi	r24, 0xF7	; 247
 95a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000095e <.LBE271>:
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 95e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <USB_Device_ConfigurationNumber>

00000962 <.Loc.315>:
	Endpoint_ClearStatusStage();
 962:	77 dd       	rcall	.-1298   	; 0x452 <Endpoint_ClearStatusStage>

00000964 <.LVL68>:
	if (USB_Device_ConfigurationNumber)
 964:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_Device_ConfigurationNumber>
 968:	88 23       	and	r24, r24
 96a:	11 f0       	breq	.+4      	; 0x970 <.L28>

0000096c <.L36>:
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 96c:	84 e0       	ldi	r24, 0x04	; 4
 96e:	05 c0       	rjmp	.+10     	; 0x97a <.L30>

00000970 <.L28>:
				return (UDADDR & (1 << ADDEN));
 970:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

00000974 <.LBE273>:
 974:	87 fd       	sbrc	r24, 7
 976:	fa cf       	rjmp	.-12     	; 0x96c <.L36>
 978:	81 e0       	ldi	r24, 0x01	; 1

0000097a <.L30>:
 97a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_DeviceState>

0000097e <.Loc.324>:
	EVENT_USB_Device_ConfigurationChanged();
 97e:	e4 db       	rcall	.-2104   	; 0x148 <EVENT_USB_Device_ConfigurationChanged>

00000980 <.LVL69>:
 980:	e5 ce       	rjmp	.-566    	; 0x74c <.L3>

00000982 <.L14>:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 982:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x2>

00000986 <.LVL71>:
 986:	81 30       	cpi	r24, 0x01	; 1
 988:	09 f0       	breq	.+2      	; 0x98c <.Loc.332>

0000098a <L0^A>:
 98a:	e0 ce       	rjmp	.-576    	; 0x74c <.L3>

0000098c <.Loc.332>:
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	93 30       	cpi	r25, 0x03	; 3
 990:	09 f0       	breq	.+2      	; 0x994 <.L16>
 992:	80 e0       	ldi	r24, 0x00	; 0

00000994 <.L16>:
 994:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_Device_RemoteWakeupEnabled>

00000998 <.L17>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 998:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000099c <.LBB254>:
				UEINTX &= ~(1 << RXSTPI);
 99c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 9a0:	87 7f       	andi	r24, 0xF7	; 247

000009a2 <.L60>:
 9a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000009a6 <.LBE254>:

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 9a6:	55 dd       	rcall	.-1366   	; 0x452 <Endpoint_ClearStatusStage>

000009a8 <.LVL74>:
 9a8:	d1 ce       	rjmp	.-606    	; 0x74c <.L3>

000009aa <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 9aa:	08 95       	ret

000009ac <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 9ac:	cf 93       	push	r28

000009ae <.LBB26>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 9ae:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>

000009b2 <.Loc.5>:
 9b2:	88 23       	and	r24, r24
 9b4:	99 f0       	breq	.+38     	; 0x9dc <.L1>

000009b6 <.LBB28>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 9b6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000009ba <.Loc.10>:
 9ba:	cf 70       	andi	r28, 0x0F	; 15

000009bc <.LBB30>:
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 9bc:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

000009c0 <.Loc.14>:
 9c0:	89 2f       	mov	r24, r25
 9c2:	81 70       	andi	r24, 0x01	; 1
 9c4:	90 fd       	sbrc	r25, 0
 9c6:	80 e8       	ldi	r24, 0x80	; 128

000009c8 <.LBE30>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 9c8:	c8 2b       	or	r28, r24

000009ca <.LBB32>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9ca:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000009ce <.LBB34>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000009d2 <.LBE34>:

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 9d2:	83 fd       	sbrc	r24, 3

000009d4 <.Loc.27>:
	  USB_Device_ProcessControlRequest();
 9d4:	90 de       	rcall	.-736    	; 0x6f6 <USB_Device_ProcessControlRequest>

000009d6 <.LBB36>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9d6:	cf 70       	andi	r28, 0x0F	; 15

000009d8 <.LVL3>:
 9d8:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000009dc <.L1>:
}
 9dc:	cf 91       	pop	r28
 9de:	08 95       	ret

000009e0 <strncmp>:
 9e0:	fb 01       	movw	r30, r22
 9e2:	dc 01       	movw	r26, r24

000009e4 <.L_strncmp_loop>:
 9e4:	41 50       	subi	r20, 0x01	; 1
 9e6:	50 40       	sbci	r21, 0x00	; 0
 9e8:	30 f0       	brcs	.+12     	; 0x9f6 <.L_strncmp_equal>
 9ea:	8d 91       	ld	r24, X+
 9ec:	01 90       	ld	r0, Z+
 9ee:	80 19       	sub	r24, r0
 9f0:	19 f4       	brne	.+6      	; 0x9f8 <.L_strncmp_done>
 9f2:	00 20       	and	r0, r0
 9f4:	b9 f7       	brne	.-18     	; 0x9e4 <.L_strncmp_loop>

000009f6 <.L_strncmp_equal>:
 9f6:	88 1b       	sub	r24, r24

000009f8 <.L_strncmp_done>:
 9f8:	99 0b       	sbc	r25, r25
 9fa:	08 95       	ret

000009fc <_exit>:
 9fc:	f8 94       	cli

000009fe <__stop_program>:
 9fe:	ff cf       	rjmp	.-2      	; 0x9fe <__stop_program>
