
Echo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000a6c  00000b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080010a  0080010a  00000b0a  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  00000b0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000298  00000000  00000000  00000b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00005b6b  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001af6  00000000  00000000  00006973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00006c8e  00000000  00000000  00008469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000006f8  00000000  00000000  0000f0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001ddd  00000000  00000000  0000f7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000381d  00000000  00000000  000115cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000590  00000000  00000000  00014dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	ae c2       	rjmp	.+1372   	; 0x58a <__vector_11>
  2e:	00 00       	nop
  30:	55 c3       	rjmp	.+1706   	; 0x6dc <__vector_12>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	14 03 4c 00 55 00 46 00 41 00 20 00 45 00 63 00     ..L.U.F.A. .E.c.
  84:	68 00 6f 00 00 00                                   h.o...

0000008a <ManufacturerString>:
  8a:	1a 03 4c 00 55 00 46 00 41 00 20 00 4c 00 69 00     ..L.U.F.A. .L.i.
  9a:	62 00 72 00 61 00 72 00 79 00 00 00                 b.r.a.r.y...

000000a6 <LanguageString>:
  a6:	04 03 09 04                                         ....

000000aa <ConfigurationDescriptor>:
  aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff ff     .. .....2.......
  ba:	ff 00 07 05 81 03 01 00 05 07 05 02 03 0a 00 05     ................

000000ca <DeviceDescriptor>:
  ca:	12 01 10 01 00 00 00 08 42 42 02 00 01 00 01 02     ........BB......
  da:	dc 01                                               ..

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d2 e0       	ldi	r29, 0x02	; 2
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1

000000ea <.Loc.1>:
  ea:	a0 e0       	ldi	r26, 0x00	; 0

000000ec <.Loc.2>:
  ec:	b1 e0       	ldi	r27, 0x01	; 1

000000ee <.Loc.3>:
  ee:	ec e6       	ldi	r30, 0x6C	; 108

000000f0 <.Loc.4>:
  f0:	fa e0       	ldi	r31, 0x0A	; 10

000000f2 <.Loc.5>:
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <.L__do_copy_data_start>

000000f4 <.L__do_copy_data_loop>:
  f4:	05 90       	lpm	r0, Z+

000000f6 <.Loc.7>:
  f6:	0d 92       	st	X+, r0

000000f8 <.L__do_copy_data_start>:
  f8:	aa 30       	cpi	r26, 0x0A	; 10

000000fa <.Loc.9>:
  fa:	b1 07       	cpc	r27, r17

000000fc <.Loc.10>:
  fc:	d9 f7       	brne	.-10     	; 0xf4 <.L__do_copy_data_loop>

000000fe <__do_clear_bss>:
  fe:	21 e0       	ldi	r18, 0x01	; 1

00000100 <.Loc.1>:
 100:	aa e0       	ldi	r26, 0x0A	; 10

00000102 <.Loc.2>:
 102:	b1 e0       	ldi	r27, 0x01	; 1

00000104 <.Loc.3>:
 104:	01 c0       	rjmp	.+2      	; 0x108 <.Loc.5>

00000106 <.Loc.4>:
 106:	1d 92       	st	X+, r1

00000108 <.Loc.5>:
 108:	a3 32       	cpi	r26, 0x23	; 35

0000010a <.Loc.6>:
 10a:	b2 07       	cpc	r27, r18

0000010c <.Loc.7>:
 10c:	e1 f7       	brne	.-8      	; 0x106 <.Loc.4>

0000010e <L0^A>:
 10e:	a9 d0       	rcall	.+338    	; 0x262 <main>
 110:	ab c4       	rjmp	.+2390   	; 0xa68 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 114:	84 b7       	in	r24, 0x34	; 52
 116:	87 7f       	andi	r24, 0xF7	; 247
 118:	84 bf       	out	0x34, r24	; 52

0000011a <.LBB54>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	a8 95       	wdr
 120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 124:	88 61       	ori	r24, 0x18	; 24
 126:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 12e:	0f be       	out	0x3f, r0	; 63

00000130 <.LBB57>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 140:	0f be       	out	0x3f, r0	; 63

00000142 <.LBE57>:

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	USB_Init();
 142:	14 c2       	rjmp	.+1064   	; 0x56c <USB_Init>

00000144 <EVENT_USB_Device_Connect>:
}

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
}
 144:	08 95       	ret

00000146 <EVENT_USB_Device_Disconnect>:
 146:	08 95       	ret

00000148 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 148:	42 e0       	ldi	r20, 0x02	; 2
 14a:	61 ec       	ldi	r22, 0xC1	; 193
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	83 d1       	rcall	.+774    	; 0x456 <Endpoint_ConfigureEndpoint_Prv>

00000150 <.LBB63>:
 150:	42 e1       	ldi	r20, 0x12	; 18
 152:	60 ec       	ldi	r22, 0xC0	; 192
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	7f c1       	rjmp	.+766    	; 0x456 <Endpoint_ConfigureEndpoint_Prv>

00000158 <EVENT_USB_Device_ControlRequest>:
 158:	08 95       	ret

0000015a <Handle_EP_IN>:
volatile char EP_Data[10];

unsigned char present = 0;

void Handle_EP_IN(void)
{
 15a:	cf 93       	push	r28

0000015c <.LBB67>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 15c:	c1 e0       	ldi	r28, 0x01	; 1
 15e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000162 <.LBB69>:
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 162:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000166 <.LBE69>:
	/* Select the IN Endpoint */
	Endpoint_SelectEndpoint(ECHO_IN_EPADDR);

	/* Check if IN Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed() && present)
 166:	85 ff       	sbrs	r24, 5
 168:	1c c0       	rjmp	.+56     	; 0x1a2 <.L6>

0000016a <.Loc.53>:
 16a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <present>
 16e:	88 23       	and	r24, r24
 170:	c1 f0       	breq	.+48     	; 0x1a2 <.L6>

00000172 <.Loc.54>:
	{
		if (strncmp(EP_Data, token, 10) == 0)
 172:	4a e0       	ldi	r20, 0x0A	; 10
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	71 e0       	ldi	r23, 0x01	; 1
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	66 d4       	rcall	.+2252   	; 0xa4c <strncmp>

00000180 <.LVL8>:
 180:	89 2b       	or	r24, r25
 182:	89 f4       	brne	.+34     	; 0x1a6 <.L8>

00000184 <.Loc.57>:
		{
			PORTB &= 0b10000000;
 184:	85 b1       	in	r24, 0x05	; 5
 186:	80 78       	andi	r24, 0x80	; 128
 188:	85 b9       	out	0x05, r24	; 5

0000018a <.Loc.59>:
			PORTB |= 0b00101010;
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	8a 62       	ori	r24, 0x2A	; 42
 18e:	85 b9       	out	0x05, r24	; 5

00000190 <.Loc.61>:
			try = 0;
 190:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <try>

00000194 <.L9>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 194:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 198:	8e 77       	andi	r24, 0x7E	; 126
 19a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000019e <.LBE71>:
		}

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		present = 0;
 19e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <present>

000001a2 <.L6>:
	}
}
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <.L8>:
			if(try == 0)
 1a6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <try>

000001aa <.Loc.72>:
 1aa:	81 11       	cpse	r24, r1
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <.L10>

000001ae <.Loc.73>:
				try++;
 1ae:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <try>

000001b2 <.Loc.75>:
				PORTB &= 0b10000000;
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	80 78       	andi	r24, 0x80	; 128
 1b6:	85 b9       	out	0x05, r24	; 5

000001b8 <.Loc.77>:
				PORTB |= 0b00000001;
 1b8:	28 9a       	sbi	0x05, 0	; 5
 1ba:	ec cf       	rjmp	.-40     	; 0x194 <.L9>

000001bc <.L10>:
			else if(try == 1)
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	51 f4       	brne	.+20     	; 0x1d4 <.L11>

000001c0 <.Loc.81>:
				try++;
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <try>

000001c6 <.Loc.83>:
				PORTB &= 0b10000000;
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	80 78       	andi	r24, 0x80	; 128
 1ca:	85 b9       	out	0x05, r24	; 5

000001cc <.Loc.85>:
				PORTB |= 0b00000101;
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	85 60       	ori	r24, 0x05	; 5

000001d0 <.L20>:
				PORTB |= 0b00010101;
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	e0 cf       	rjmp	.-64     	; 0x194 <.L9>

000001d4 <.L11>:
			else if(try == 2)
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	49 f4       	brne	.+18     	; 0x1ea <.L12>

000001d8 <.Loc.90>:
				try++;
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <try>

000001de <.Loc.92>:
				PORTB &= 0b10000000;
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	80 78       	andi	r24, 0x80	; 128
 1e2:	85 b9       	out	0x05, r24	; 5

000001e4 <.Loc.94>:
				PORTB |= 0b00010101;
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	85 61       	ori	r24, 0x15	; 21
 1e8:	f3 cf       	rjmp	.-26     	; 0x1d0 <.L20>

000001ea <.L12>:
					PORTB &= 0b10000000;
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	80 78       	andi	r24, 0x80	; 128
 1ee:	85 b9       	out	0x05, r24	; 5

000001f0 <.Loc.100>:
					PORTB |= 0b00010101;
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	85 61       	ori	r24, 0x15	; 21
 1f4:	85 b9       	out	0x05, r24	; 5

000001f6 <.LBB73>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	89 e6       	ldi	r24, 0x69	; 105
 1fa:	98 e1       	ldi	r25, 0x18	; 24

000001fc <.L1^B1>:
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <.L1^B1>
 204:	00 c0       	rjmp	.+0      	; 0x206 <L0^A>

00000206 <L0^A>:
 206:	00 00       	nop

00000208 <.LBE76>:
					PORTB &= 0b10000000;
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	80 78       	andi	r24, 0x80	; 128
 20c:	85 b9       	out	0x05, r24	; 5

0000020e <.LBB77>:
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	89 e6       	ldi	r24, 0x69	; 105
 212:	98 e1       	ldi	r25, 0x18	; 24

00000214 <.L1^B2>:
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <.L1^B2>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <L0^A>

0000021e <L0^A>:
 21e:	00 00       	nop
 220:	e4 cf       	rjmp	.-56     	; 0x1ea <.L12>

00000222 <Handle_EP_OUT>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000228 <.LBB83>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 228:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000022c <.LBE83>:
{
	/* Select the OUT Endpoint */
	Endpoint_SelectEndpoint(ECHO_OUT_EPADDR);

	/* Check if Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
 22c:	82 ff       	sbrs	r24, 2
 22e:	18 c0       	rjmp	.+48     	; 0x260 <.L21>

00000230 <.LBB85>:
				return ((UEINTX & (1 << RWAL)) ? true : false);
 230:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000234 <.LBE85>:
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 234:	85 ff       	sbrs	r24, 5
 236:	0f c0       	rjmp	.+30     	; 0x256 <.L23>

00000238 <.LBB87>:
		{
			/* Read in the LED report from the host */
			// Envoi du mdp
			for (int i = 0; i < 10; i++)
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0

0000023c <.L24>:
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 23c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

00000240 <.LBE88>:
			{
				EP_Data[i] = Endpoint_Read_8();
 240:	fc 01       	movw	r30, r24
 242:	e4 5f       	subi	r30, 0xF4	; 244
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	20 83       	st	Z, r18

00000248 <.Loc.146>:
			for (int i = 0; i < 10; i++)
 248:	01 96       	adiw	r24, 0x01	; 1

0000024a <.Loc.148>:
 24a:	8a 30       	cpi	r24, 0x0A	; 10
 24c:	91 05       	cpc	r25, r1
 24e:	b1 f7       	brne	.-20     	; 0x23c <.L24>

00000250 <.LBE87>:
			}

			present = 1;
 250:	81 e0       	ldi	r24, 0x01	; 1

00000252 <.LVL16>:
 252:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <present>

00000256 <.L23>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 256:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 25a:	8b 77       	andi	r24, 0x7B	; 123
 25c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000260 <.L21>:
		}

		/* Handshake the OUT Endpoint - clear endpoint */
		Endpoint_ClearOUT();
	}
}
 260:	08 95       	ret

00000262 <main>:
	CLKSEL0 = 0b00010101;   // sélection de l'horloge externe
 262:	85 e1       	ldi	r24, 0x15	; 21
 264:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>

00000268 <.Loc.161>:
	CLKSEL1 = 0b00001111;   // minimum de 8Mhz
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>

0000026e <.Loc.163>:
	CLKPR = 0b10000000;     // modification du diviseur d'horloge (CLKPCE=1)
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>

00000274 <.Loc.165>:
	CLKPR = 0;              // 0 pour pas de diviseur (diviseur de 1)
 274:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>

00000278 <.Loc.167>:
	DDRB = 0b01111111; // set all pins on port B as output except for PB7
 278:	8f e7       	ldi	r24, 0x7F	; 127
 27a:	84 b9       	out	0x04, r24	; 4

0000027c <.Loc.169>:
	PORTB &= 0b10000000;
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	80 78       	andi	r24, 0x80	; 128
 280:	85 b9       	out	0x05, r24	; 5

00000282 <.Loc.171>:
	SetupHardware();
 282:	48 df       	rcall	.-368    	; 0x114 <SetupHardware>

00000284 <.LBB92>:
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 284:	78 94       	sei

00000286 <.L33>:
		Handle_EP_IN();
 286:	69 df       	rcall	.-302    	; 0x15a <Handle_EP_IN>

00000288 <.LVL19>:
		Handle_EP_OUT();
 288:	cc df       	rcall	.-104    	; 0x222 <Handle_EP_OUT>

0000028a <.LVL20>:
		USB_USBTask();
 28a:	c6 d3       	rcall	.+1932   	; 0xa18 <USB_USBTask>

0000028c <.LVL21>:
	for (;;)
 28c:	fc cf       	rjmp	.-8      	; 0x286 <.L33>

0000028e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
 28e:	9c 01       	movw	r18, r24
 290:	da 01       	movw	r26, r20

00000292 <.Loc.2>:
	const uint8_t  DescriptorType   = (wValue >> 8);
 292:	83 2f       	mov	r24, r19
 294:	99 27       	eor	r25, r25

00000296 <.LVL1>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	91 05       	cpc	r25, r1
 29a:	29 f1       	breq	.+74     	; 0x2e6 <.L6>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	91 05       	cpc	r25, r1
 2a0:	49 f0       	breq	.+18     	; 0x2b4 <.L3>
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	91 f4       	brne	.+36     	; 0x2ca <.L8>
 2a6:	82 e1       	ldi	r24, 0x12	; 18
 2a8:	90 e0       	ldi	r25, 0x00	; 0

000002aa <.LVL2>:
 2aa:	2a ec       	ldi	r18, 0xCA	; 202
 2ac:	30 e0       	ldi	r19, 0x00	; 0

000002ae <.L2>:
			}

			break;
	}

	*DescriptorAddress = Address;
 2ae:	2d 93       	st	X+, r18
 2b0:	3c 93       	st	X, r19

000002b2 <.Loc.11>:
	return Size;
}
 2b2:	08 95       	ret

000002b4 <.L3>:
			switch (DescriptorNumber)
 2b4:	c9 01       	movw	r24, r18

000002b6 <.LVL5>:
 2b6:	99 27       	eor	r25, r25
 2b8:	21 30       	cpi	r18, 0x01	; 1
 2ba:	61 f0       	breq	.+24     	; 0x2d4 <.L4>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	91 05       	cpc	r25, r1
 2c0:	79 f0       	breq	.+30     	; 0x2e0 <.L5>

000002c2 <.LBB2>:
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 2c2:	e6 ea       	ldi	r30, 0xA6	; 166
 2c4:	f0 e0       	ldi	r31, 0x00	; 0

000002c6 <.LBE2>:
 2c6:	89 2b       	or	r24, r25
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <.L9>

000002ca <.L8>:
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	20 e0       	ldi	r18, 0x00	; 0

000002d2 <.LVL6>:
 2d2:	ed cf       	rjmp	.-38     	; 0x2ae <.L2>

000002d4 <.L4>:
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 2d4:	ea e8       	ldi	r30, 0x8A	; 138
 2d6:	f0 e0       	ldi	r31, 0x00	; 0

000002d8 <.L9>:
 2d8:	84 91       	lpm	r24, Z

000002da <.LBE3>:
 2da:	90 e0       	ldi	r25, 0x00	; 0

000002dc <.LVL10>:
					Address = &ManufacturerString;
 2dc:	9f 01       	movw	r18, r30

000002de <.LVL11>:
					break;
 2de:	e7 cf       	rjmp	.-50     	; 0x2ae <.L2>

000002e0 <.L5>:
					Size    = pgm_read_byte(&ProductString.Header.Size);
 2e0:	e4 e7       	ldi	r30, 0x74	; 116
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	f9 cf       	rjmp	.-14     	; 0x2d8 <.L9>

000002e6 <.L6>:
			Size    = sizeof(USB_Descriptor_Configuration_t);
 2e6:	80 e2       	ldi	r24, 0x20	; 32
 2e8:	90 e0       	ldi	r25, 0x00	; 0

000002ea <.LVL14>:
			Address = &ConfigurationDescriptor;
 2ea:	2a ea       	ldi	r18, 0xAA	; 170
 2ec:	30 e0       	ldi	r19, 0x00	; 0

000002ee <.LVL15>:
 2ee:	df cf       	rjmp	.-66     	; 0x2ae <.L2>

000002f0 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 2f0:	fc 01       	movw	r30, r24
 2f2:	cb 01       	movw	r24, r22

000002f4 <.LVL228>:
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 2f4:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <USB_ControlRequest+0x6>
 2f8:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <USB_ControlRequest+0x7>

000002fc <.Loc.636>:
 2fc:	26 17       	cp	r18, r22
 2fe:	37 07       	cpc	r19, r23
 300:	90 f0       	brcs	.+36     	; 0x326 <.L157>

00000302 <.Loc.637>:
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 302:	00 97       	sbiw	r24, 0x00	; 0
 304:	29 f4       	brne	.+10     	; 0x310 <.L146>

00000306 <.LBB342>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 306:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 30a:	2e 77       	andi	r18, 0x7E	; 126
 30c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000310 <.L146>:
 310:	40 e0       	ldi	r20, 0x00	; 0

00000312 <.L150>:
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	51 f4       	brne	.+20     	; 0x32a <.L155>

00000316 <.Loc.645>:
 316:	41 11       	cpse	r20, r1
 318:	08 c0       	rjmp	.+16     	; 0x32a <.L155>

0000031a <.L169>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 31a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000031e <.LBE344>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 31e:	82 ff       	sbrs	r24, 2
 320:	30 c0       	rjmp	.+96     	; 0x382 <.L156>

00000322 <.Loc.651>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	08 95       	ret

00000326 <.L157>:
 326:	c9 01       	movw	r24, r18
 328:	f3 cf       	rjmp	.-26     	; 0x310 <.L146>

0000032a <.L155>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 32a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <USB_DeviceState>

0000032e <.LVL233>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 32e:	22 23       	and	r18, r18
 330:	a1 f1       	breq	.+104    	; 0x39a <.L161>

00000332 <.Loc.657>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 332:	25 30       	cpi	r18, 0x05	; 5
 334:	a1 f1       	breq	.+104    	; 0x39e <.L162>

00000336 <.LBB347>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 336:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000033a <.LBE347>:
		else if (Endpoint_IsSETUPReceived())
 33a:	23 fd       	sbrc	r18, 3
 33c:	2c c0       	rjmp	.+88     	; 0x396 <.L163>

0000033e <.LBB349>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 33e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000342 <.LBE349>:
		else if (Endpoint_IsOUTReceived())
 342:	22 fd       	sbrc	r18, 2
 344:	ea cf       	rjmp	.-44     	; 0x31a <.L169>

00000346 <.LBB351>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 346:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000034a <.LBE351>:
		if (Endpoint_IsINReady())
 34a:	20 ff       	sbrs	r18, 0
 34c:	e2 cf       	rjmp	.-60     	; 0x312 <.L150>

0000034e <.LBB353>:
					return UEBCLX;
 34e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 352:	30 e0       	ldi	r19, 0x00	; 0

00000354 <.L151>:
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 354:	00 97       	sbiw	r24, 0x00	; 0
 356:	19 f0       	breq	.+6      	; 0x35e <.L152>

00000358 <.Loc.682>:
 358:	28 30       	cpi	r18, 0x08	; 8
 35a:	31 05       	cpc	r19, r1
 35c:	58 f0       	brcs	.+22     	; 0x374 <.L153>

0000035e <.L152>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	28 30       	cpi	r18, 0x08	; 8
 362:	31 05       	cpc	r19, r1
 364:	09 f0       	breq	.+2      	; 0x368 <.L154>
 366:	40 e0       	ldi	r20, 0x00	; 0

00000368 <.L154>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 368:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000036c <.LVL237>:
 36c:	2e 77       	andi	r18, 0x7E	; 126
 36e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000372 <.LVL238>:
				#else
					UEINTX &= ~(1 << TXINI);
				#endif
			}
 372:	cf cf       	rjmp	.-98     	; 0x312 <.L150>

00000374 <.L153>:
				TEMPLATE_TRANSFER_BYTE(DataStream);
 374:	41 91       	ld	r20, Z+

00000376 <.LBB358>:
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 376:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

0000037a <.LBE358>:
				Length--;
 37a:	01 97       	sbiw	r24, 0x01	; 1

0000037c <.Loc.700>:
				BytesInEndpoint++;
 37c:	2f 5f       	subi	r18, 0xFF	; 255
 37e:	3f 4f       	sbci	r19, 0xFF	; 255

00000380 <.Loc.702>:
 380:	e9 cf       	rjmp	.-46     	; 0x354 <.L151>

00000382 <.L156>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 382:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

00000386 <.LVL245>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 386:	88 23       	and	r24, r24
 388:	41 f0       	breq	.+16     	; 0x39a <.L161>

0000038a <.Loc.708>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 38a:	85 30       	cpi	r24, 0x05	; 5
 38c:	41 f0       	breq	.+16     	; 0x39e <.L162>

0000038e <.LBB361>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 38e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000392 <.LBE361>:
		else if (Endpoint_IsSETUPReceived())
 392:	83 ff       	sbrs	r24, 3
 394:	c2 cf       	rjmp	.-124    	; 0x31a <.L169>

00000396 <.L163>:
		  return ENDPOINT_RWCSTREAM_HostAborted;
 396:	81 e0       	ldi	r24, 0x01	; 1

00000398 <.LBE363>:
}
 398:	08 95       	ret

0000039a <.L161>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	08 95       	ret

0000039e <.L162>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	08 95       	ret

000003a2 <Endpoint_Write_Control_PStream_LE>:
{
 3a2:	fc 01       	movw	r30, r24
 3a4:	cb 01       	movw	r24, r22

000003a6 <.LVL293>:
	if (Length > USB_ControlRequest.wLength)
 3a6:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <USB_ControlRequest+0x6>
 3aa:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <USB_ControlRequest+0x7>

000003ae <.Loc.941>:
 3ae:	26 17       	cp	r18, r22
 3b0:	37 07       	cpc	r19, r23
 3b2:	90 f0       	brcs	.+36     	; 0x3d8 <.L253>

000003b4 <.Loc.942>:
	else if (!(Length))
 3b4:	00 97       	sbiw	r24, 0x00	; 0
 3b6:	29 f4       	brne	.+10     	; 0x3c2 <.L242>

000003b8 <.LBB422>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3b8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 3bc:	2e 77       	andi	r18, 0x7E	; 126
 3be:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000003c2 <.L242>:
 3c2:	40 e0       	ldi	r20, 0x00	; 0

000003c4 <.L246>:
	while (Length || LastPacketFull)
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	51 f4       	brne	.+20     	; 0x3dc <.L251>

000003c8 <.Loc.950>:
 3c8:	41 11       	cpse	r20, r1
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <.L251>

000003cc <.L265>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000003d0 <.LBE424>:
	while (!(Endpoint_IsOUTReceived()))
 3d0:	82 ff       	sbrs	r24, 2
 3d2:	31 c0       	rjmp	.+98     	; 0x436 <.L252>

000003d4 <.Loc.956>:
	return ENDPOINT_RWCSTREAM_NoError;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	08 95       	ret

000003d8 <.L253>:
 3d8:	c9 01       	movw	r24, r18
 3da:	f3 cf       	rjmp	.-26     	; 0x3c2 <.L242>

000003dc <.L251>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3dc:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <USB_DeviceState>

000003e0 <.LVL298>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3e0:	22 23       	and	r18, r18
 3e2:	a9 f1       	breq	.+106    	; 0x44e <.L257>

000003e4 <.Loc.962>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3e4:	25 30       	cpi	r18, 0x05	; 5
 3e6:	a9 f1       	breq	.+106    	; 0x452 <.L258>

000003e8 <.LBB427>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 3e8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000003ec <.LBE427>:
		else if (Endpoint_IsSETUPReceived())
 3ec:	23 fd       	sbrc	r18, 3
 3ee:	2d c0       	rjmp	.+90     	; 0x44a <.L259>

000003f0 <.LBB429>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3f0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000003f4 <.LBE429>:
		else if (Endpoint_IsOUTReceived())
 3f4:	22 fd       	sbrc	r18, 2
 3f6:	ea cf       	rjmp	.-44     	; 0x3cc <.L265>

000003f8 <.LBB431>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3f8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000003fc <.LBE431>:
		if (Endpoint_IsINReady())
 3fc:	20 ff       	sbrs	r18, 0
 3fe:	e2 cf       	rjmp	.-60     	; 0x3c4 <.L246>

00000400 <.LBB433>:
					return UEBCLX;
 400:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 404:	30 e0       	ldi	r19, 0x00	; 0

00000406 <.L247>:
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 406:	00 97       	sbiw	r24, 0x00	; 0
 408:	19 f0       	breq	.+6      	; 0x410 <.L248>

0000040a <.Loc.987>:
 40a:	28 30       	cpi	r18, 0x08	; 8
 40c:	31 05       	cpc	r19, r1
 40e:	58 f0       	brcs	.+22     	; 0x426 <.L249>

00000410 <.L248>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	28 30       	cpi	r18, 0x08	; 8
 414:	31 05       	cpc	r19, r1
 416:	09 f0       	breq	.+2      	; 0x41a <.L250>
 418:	40 e0       	ldi	r20, 0x00	; 0

0000041a <.L250>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 41a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000041e <.LVL302>:
 41e:	2e 77       	andi	r18, 0x7E	; 126
 420:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000424 <.LVL303>:
			}
 424:	cf cf       	rjmp	.-98     	; 0x3c4 <.L246>

00000426 <.L249>:
				TEMPLATE_TRANSFER_BYTE(DataStream);
 426:	44 91       	lpm	r20, Z

00000428 <.LBB439>:
				UEDATX = Data;
 428:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

0000042c <.LBE439>:
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 42c:	31 96       	adiw	r30, 0x01	; 1

0000042e <.LVL307>:
				Length--;
 42e:	01 97       	sbiw	r24, 0x01	; 1

00000430 <.Loc.1010>:
				BytesInEndpoint++;
 430:	2f 5f       	subi	r18, 0xFF	; 255
 432:	3f 4f       	sbci	r19, 0xFF	; 255

00000434 <.Loc.1012>:
 434:	e8 cf       	rjmp	.-48     	; 0x406 <.L247>

00000436 <.L252>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 436:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

0000043a <.LVL311>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 43a:	88 23       	and	r24, r24
 43c:	41 f0       	breq	.+16     	; 0x44e <.L257>

0000043e <.Loc.1018>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 43e:	85 30       	cpi	r24, 0x05	; 5
 440:	41 f0       	breq	.+16     	; 0x452 <.L258>

00000442 <.LBB442>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 442:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000446 <.LBE442>:
		else if (Endpoint_IsSETUPReceived())
 446:	83 ff       	sbrs	r24, 3
 448:	c1 cf       	rjmp	.-126    	; 0x3cc <.L265>

0000044a <.L259>:
		  return ENDPOINT_RWCSTREAM_HostAborted;
 44a:	81 e0       	ldi	r24, 0x01	; 1

0000044c <.LBE444>:
}
 44c:	08 95       	ret

0000044e <.L257>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	08 95       	ret

00000452 <.L258>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	08 95       	ret

00000456 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 456:	98 2f       	mov	r25, r24

00000458 <.L2>:
 458:	95 30       	cpi	r25, 0x05	; 5
 45a:	28 f0       	brcs	.+10     	; 0x466 <.L7>

0000045c <.LBB58>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 45c:	8f 70       	andi	r24, 0x0F	; 15

0000045e <.LVL3>:
 45e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000462 <.LBE58>:
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	08 95       	ret

00000466 <.L7>:
 466:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000046a <.LBE49>:
			UECFG1XTemp = UECFG1XData;
 46a:	24 2f       	mov	r18, r20

0000046c <.Loc.25>:
			UECFG0XTemp = UECFG0XData;
 46c:	76 2f       	mov	r23, r22

0000046e <.Loc.26>:
			UEIENXTemp  = 0;
 46e:	50 e0       	ldi	r21, 0x00	; 0

00000470 <.Loc.27>:
		if (EPNum == Number)
 470:	98 17       	cp	r25, r24
 472:	31 f0       	breq	.+12     	; 0x480 <.L3>

00000474 <.LVL7>:
			UECFG0XTemp = UECFG0X;
 474:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

00000478 <.LVL8>:
			UECFG1XTemp = UECFG1X;
 478:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

0000047c <.LVL9>:
			UEIENXTemp  = UEIENX;
 47c:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

00000480 <.L3>:
		if (!(UECFG1XTemp & (1 << ALLOC)))
 480:	21 fd       	sbrc	r18, 1
 482:	02 c0       	rjmp	.+4      	; 0x488 <.L4>

00000484 <.L6>:
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 484:	9f 5f       	subi	r25, 0xFF	; 255

00000486 <.Loc.39>:
 486:	e8 cf       	rjmp	.-48     	; 0x458 <.L2>

00000488 <.L4>:
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 488:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 48c:	3e 7f       	andi	r19, 0xFE	; 254
 48e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000492 <.LBE51>:
		UECFG1X &= ~(1 << ALLOC);
 492:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 496:	3d 7f       	andi	r19, 0xFD	; 253
 498:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

0000049c <.LBB53>:
				UECONX |= (1 << EPEN);
 49c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 4a0:	31 60       	ori	r19, 0x01	; 1
 4a2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

000004a6 <.LBE53>:
		UECFG0X = UECFG0XTemp;
 4a6:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

000004aa <.Loc.52>:
		UECFG1X = UECFG1XTemp;
 4aa:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

000004ae <.Loc.54>:
		UEIENX  = UEIENXTemp;
 4ae:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

000004b2 <.LBB55>:
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 4b2:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

000004b6 <.LBE55>:
		if (!(Endpoint_IsConfigured()))
 4b6:	27 fd       	sbrc	r18, 7
 4b8:	e5 cf       	rjmp	.-54     	; 0x484 <.L6>

000004ba <.Loc.62>:
		  return false;
 4ba:	80 e0       	ldi	r24, 0x00	; 0

000004bc <.LBE57>:
#endif
}
 4bc:	08 95       	ret

000004be <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4be:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
 4c2:	87 ff       	sbrs	r24, 7
 4c4:	13 c0       	rjmp	.+38     	; 0x4ec <.L27>

000004c6 <.L26>:
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000004ca <.LBE81>:
	{
		while (!(Endpoint_IsOUTReceived()))
 4ca:	82 ff       	sbrs	r24, 2
 4cc:	06 c0       	rjmp	.+12     	; 0x4da <.L29>

000004ce <.LBB83>:
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 4d2:	8b 77       	andi	r24, 0x7B	; 123

000004d4 <.L38>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000004d8 <.Loc.156>:
			}
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <.L25>

000004da <.L29>:
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4da:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

000004de <.Loc.159>:
 4de:	81 11       	cpse	r24, r1
 4e0:	f2 cf       	rjmp	.-28     	; 0x4c6 <.L26>

000004e2 <.L25>:
			  return;
		}

		Endpoint_ClearIN();
	}
}
 4e2:	08 95       	ret

000004e4 <.L30>:
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4e4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

000004e8 <.Loc.163>:
 4e8:	88 23       	and	r24, r24
 4ea:	d9 f3       	breq	.-10     	; 0x4e2 <.L25>

000004ec <.L27>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000004f0 <.LBE88>:
		while (!(Endpoint_IsINReady()))
 4f0:	80 ff       	sbrs	r24, 0
 4f2:	f8 cf       	rjmp	.-16     	; 0x4e4 <.L30>

000004f4 <.LBB90>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 4f8:	8e 77       	andi	r24, 0x7E	; 126
 4fa:	ec cf       	rjmp	.-40     	; 0x4d4 <.L38>

000004fc <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 4fc:	40 d0       	rcall	.+128    	; 0x57e <USB_INT_DisableAllInterrupts>

000004fe <.LVL2>:
	USB_INT_ClearAllInterrupts();
 4fe:	42 d0       	rcall	.+132    	; 0x584 <USB_INT_ClearAllInterrupts>

00000500 <.LBB62>:
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 500:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 504:	8f 77       	andi	r24, 0x7F	; 127
 506:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

0000050a <.Loc.31>:
				USBCON |=  (1 << USBE);
 50a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 50e:	80 68       	ori	r24, 0x80	; 128
 510:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

00000514 <.LBB64>:
				USBCON &= ~(1 << FRZCLK);
 514:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 518:	8f 7d       	andi	r24, 0xDF	; 223
 51a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

0000051e <.LBB66>:
				PLLCSR = USB_PLL_PSC;
 51e:	19 bc       	out	0x29, r1	; 41

00000520 <.Loc.43>:
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	89 bd       	out	0x29, r24	; 41

00000524 <.L3>:

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 524:	09 b4       	in	r0, 0x29	; 41
 526:	00 fe       	sbrs	r0, 0
 528:	fd cf       	rjmp	.-6      	; 0x524 <.L3>

0000052a <.LBB70>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 52a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_DeviceState>

0000052e <.Loc.54>:
	USB_Device_ConfigurationNumber  = 0;
 52e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_Device_ConfigurationNumber>

00000532 <.Loc.56>:

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 532:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_Device_RemoteWakeupEnabled>

00000536 <.Loc.58>:
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 536:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_Device_CurrentlySelfPowered>

0000053a <.LBB72>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
 53a:	42 e0       	ldi	r20, 0x02	; 2
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	8a df       	rcall	.-236    	; 0x456 <Endpoint_ConfigureEndpoint_Prv>

00000542 <.LBB76>:
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 542:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 546:	8e 7f       	andi	r24, 0xFE	; 254
 548:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

0000054c <.LBB78>:
						UDIEN  |= (1 << SUSPE);
 54c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 550:	81 60       	ori	r24, 0x01	; 1
 552:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000556 <.LBB80>:
						UDIEN  |= (1 << EORSTE);
 556:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 55a:	88 60       	ori	r24, 0x08	; 8
 55c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000560 <.LBB82>:
				UDCON  &= ~(1 << DETACH);
 560:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
 564:	8e 7f       	andi	r24, 0xFE	; 254
 566:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>

0000056a <.LBE82>:
}
 56a:	08 95       	ret

0000056c <USB_Init>:
				REGCR  &= ~(1 << REGDIS);
 56c:	e3 e6       	ldi	r30, 0x63	; 99
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	8e 7f       	andi	r24, 0xFE	; 254
 574:	80 83       	st	Z, r24

00000576 <.LBE86>:
	USB_IsInitialized = true;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_IsInitialized>

0000057c <.Loc.110>:
	USB_ResetInterface();
 57c:	bf cf       	rjmp	.-130    	; 0x4fc <USB_ResetInterface>

0000057e <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 57e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000582 <.Loc.3>:
	#endif
}
 582:	08 95       	ret

00000584 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 584:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000588 <.Loc.7>:
	#endif
}
 588:	08 95       	ret

0000058a <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 58a:	1f 92       	push	r1

0000058c <.LCFI0>:
 58c:	0f 92       	push	r0

0000058e <.LCFI1>:
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	2f 93       	push	r18

00000596 <.LCFI2>:
 596:	3f 93       	push	r19

00000598 <.LCFI3>:
 598:	4f 93       	push	r20

0000059a <.LCFI4>:
 59a:	5f 93       	push	r21

0000059c <.LCFI5>:
 59c:	6f 93       	push	r22

0000059e <.LCFI6>:
 59e:	7f 93       	push	r23

000005a0 <.LCFI7>:
 5a0:	8f 93       	push	r24

000005a2 <.LCFI8>:
 5a2:	9f 93       	push	r25

000005a4 <.LCFI9>:
 5a4:	af 93       	push	r26

000005a6 <.LCFI10>:
 5a6:	bf 93       	push	r27

000005a8 <.LCFI11>:
 5a8:	ef 93       	push	r30

000005aa <.LCFI12>:
 5aa:	ff 93       	push	r31

000005ac <.LBB76>:
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 5ac:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

000005b0 <.LBE76>:
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 5b0:	82 ff       	sbrs	r24, 2
 5b2:	0a c0       	rjmp	.+20     	; 0x5c8 <.L4>

000005b4 <.LBB78>:
						return (UDIEN  & (1 << SOFE));
 5b4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000005b8 <.LBE78>:
 5b8:	82 ff       	sbrs	r24, 2
 5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <.L4>

000005bc <.LBB80>:
						UDINT  &= ~(1 << SOFI);
 5bc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 5c0:	8b 7f       	andi	r24, 0xFB	; 251
 5c2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

000005c6 <.LBE80>:
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 5c6:	27 d2       	rcall	.+1102   	; 0xa16 <USB_Event_Stub>

000005c8 <.L4>:
						return (UDINT  & (1 << SUSPI));
 5c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

000005cc <.LBE82>:
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 5cc:	80 ff       	sbrs	r24, 0
 5ce:	17 c0       	rjmp	.+46     	; 0x5fe <.L5>

000005d0 <.LBB84>:
						return (UDIEN  & (1 << SUSPE));
 5d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000005d4 <.LBE84>:
 5d4:	80 ff       	sbrs	r24, 0
 5d6:	13 c0       	rjmp	.+38     	; 0x5fe <.L5>

000005d8 <.LBB86>:
						UDIEN  &= ~(1 << SUSPE);
 5d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 5dc:	8e 7f       	andi	r24, 0xFE	; 254
 5de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000005e2 <.LBB88>:
						UDIEN  |= (1 << WAKEUPE);
 5e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 5e6:	80 61       	ori	r24, 0x10	; 16
 5e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000005ec <.LBB90>:
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 5ec:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 5f0:	80 62       	ori	r24, 0x20	; 32
 5f2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

000005f6 <.LBB92>:
				PLLCSR = 0;
 5f6:	19 bc       	out	0x29, r1	; 41

000005f8 <.LBE92>:

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 5f8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_DeviceState>

000005fc <.Loc.68>:
		EVENT_USB_Device_Disconnect();
 5fc:	a4 dd       	rcall	.-1208   	; 0x146 <EVENT_USB_Device_Disconnect>

000005fe <.L5>:
						return (UDINT  & (1 << WAKEUPI));
 5fe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000602 <.LBE94>:
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 602:	84 ff       	sbrs	r24, 4
 604:	27 c0       	rjmp	.+78     	; 0x654 <.L6>

00000606 <.LBB96>:
						return (UDIEN  & (1 << WAKEUPE));
 606:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

0000060a <.LBE96>:
 60a:	84 ff       	sbrs	r24, 4
 60c:	23 c0       	rjmp	.+70     	; 0x654 <.L6>

0000060e <.LBB98>:
				PLLCSR = USB_PLL_PSC;
 60e:	19 bc       	out	0x29, r1	; 41

00000610 <.Loc.87>:
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 610:	82 e0       	ldi	r24, 0x02	; 2
 612:	89 bd       	out	0x29, r24	; 41

00000614 <.L7>:
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 614:	09 b4       	in	r0, 0x29	; 41
 616:	00 fe       	sbrs	r0, 0
 618:	fd cf       	rjmp	.-6      	; 0x614 <.L7>

0000061a <.LBB102>:
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 61a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 61e:	8f 7d       	andi	r24, 0xDF	; 223
 620:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

00000624 <.LBB104>:
						UDINT  &= ~(1 << WAKEUPI);
 624:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 628:	8f 7e       	andi	r24, 0xEF	; 239
 62a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

0000062e <.LBB106>:
						UDIEN  &= ~(1 << WAKEUPE);
 62e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 632:	8f 7e       	andi	r24, 0xEF	; 239
 634:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000638 <.LBB108>:
						UDIEN  |= (1 << SUSPE);
 638:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 63c:	81 60       	ori	r24, 0x01	; 1
 63e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000642 <.LBE108>:
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 642:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_ConfigurationNumber>
 646:	88 23       	and	r24, r24
 648:	09 f4       	brne	.+2      	; 0x64c <.Loc.121>

0000064a <L0^A>:
 64a:	40 c0       	rjmp	.+128    	; 0x6cc <.L8>

0000064c <.Loc.121>:
		  USB_DeviceState = DEVICE_STATE_Configured;
 64c:	84 e0       	ldi	r24, 0x04	; 4

0000064e <.L10>:
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 64e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>

00000652 <.Loc.124>:

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 652:	78 dd       	rcall	.-1296   	; 0x144 <EVENT_USB_Device_Connect>

00000654 <.L6>:
						return (UDINT  & (1 << EORSTI));
 654:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000658 <.LBE110>:
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 658:	83 ff       	sbrs	r24, 3
 65a:	27 c0       	rjmp	.+78     	; 0x6aa <.L3>

0000065c <.LBB112>:
						return (UDIEN  & (1 << EORSTE));
 65c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000660 <.LBE112>:
 660:	83 ff       	sbrs	r24, 3
 662:	23 c0       	rjmp	.+70     	; 0x6aa <.L3>

00000664 <.LBB114>:
						UDINT  &= ~(1 << EORSTI);
 664:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 668:	87 7f       	andi	r24, 0xF7	; 247
 66a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

0000066e <.LBE114>:
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>

00000674 <.Loc.147>:
		USB_Device_ConfigurationNumber = 0;
 674:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_Device_ConfigurationNumber>

00000678 <.LBB116>:
						UDINT  &= ~(1 << SUSPI);
 678:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 67c:	8e 7f       	andi	r24, 0xFE	; 254
 67e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000682 <.LBB118>:
						UDIEN  &= ~(1 << SUSPE);
 682:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 686:	8e 7f       	andi	r24, 0xFE	; 254
 688:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

0000068c <.LBB120>:
						UDIEN  |= (1 << WAKEUPE);
 68c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 690:	80 61       	ori	r24, 0x10	; 16
 692:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000696 <.LBB122>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 696:	42 e0       	ldi	r20, 0x02	; 2
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	dc de       	rcall	.-584    	; 0x456 <Endpoint_ConfigureEndpoint_Prv>

0000069e <.LBB126>:
						UEIENX |= (1 << RXSTPE);
 69e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 6a2:	88 60       	ori	r24, 0x08	; 8
 6a4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

000006a8 <.LBE126>:

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 6a8:	b6 d1       	rcall	.+876    	; 0xa16 <USB_Event_Stub>

000006aa <.L3>:
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 6aa:	ff 91       	pop	r31
 6ac:	ef 91       	pop	r30
 6ae:	bf 91       	pop	r27
 6b0:	af 91       	pop	r26
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	7f 91       	pop	r23
 6b8:	6f 91       	pop	r22
 6ba:	5f 91       	pop	r21
 6bc:	4f 91       	pop	r20
 6be:	3f 91       	pop	r19
 6c0:	2f 91       	pop	r18
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <.L8>:
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 6cc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

000006d0 <.LBE128>:
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 6d0:	87 fd       	sbrc	r24, 7
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <.L12>
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	bb cf       	rjmp	.-138    	; 0x64e <.L10>

000006d8 <.L12>:
 6d8:	83 e0       	ldi	r24, 0x03	; 3
 6da:	b9 cf       	rjmp	.-142    	; 0x64e <.L10>

000006dc <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 6dc:	1f 92       	push	r1

000006de <.LCFI14>:
 6de:	0f 92       	push	r0

000006e0 <.LCFI15>:
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	2f 93       	push	r18

000006e8 <.LCFI16>:
 6e8:	3f 93       	push	r19

000006ea <.LCFI17>:
 6ea:	4f 93       	push	r20

000006ec <.LCFI18>:
 6ec:	5f 93       	push	r21

000006ee <.LCFI19>:
 6ee:	6f 93       	push	r22

000006f0 <.LCFI20>:
 6f0:	7f 93       	push	r23

000006f2 <.LCFI21>:
 6f2:	8f 93       	push	r24

000006f4 <.LCFI22>:
 6f4:	9f 93       	push	r25

000006f6 <.LCFI23>:
 6f6:	af 93       	push	r26

000006f8 <.LCFI24>:
 6f8:	bf 93       	push	r27

000006fa <.LCFI25>:
 6fa:	cf 93       	push	r28

000006fc <.LCFI26>:
 6fc:	df 93       	push	r29

000006fe <.LCFI27>:
 6fe:	ef 93       	push	r30

00000700 <.LCFI28>:
 700:	ff 93       	push	r31

00000702 <.LBB130>:
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 702:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000706 <.Loc.202>:
 706:	df 70       	andi	r29, 0x0F	; 15

00000708 <.LBB132>:
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 708:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

0000070c <.Loc.206>:
 70c:	c8 2f       	mov	r28, r24
 70e:	c1 70       	andi	r28, 0x01	; 1
 710:	80 fd       	sbrc	r24, 0
 712:	c0 e8       	ldi	r28, 0x80	; 128

00000714 <.LBB135>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 714:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000718 <.LBB137>:
						UEIENX &= ~(1 << RXSTPE);
 718:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 71c:	87 7f       	andi	r24, 0xF7	; 247
 71e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

00000722 <.LBB139>:
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 722:	78 94       	sei

00000724 <.LBE139>:
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 724:	1e d0       	rcall	.+60     	; 0x762 <USB_Device_ProcessControlRequest>

00000726 <.LBB141>:
 726:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000072a <.LBB143>:
						UEIENX |= (1 << RXSTPE);
 72a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 72e:	88 60       	ori	r24, 0x08	; 8
 730:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

00000734 <.LBB145>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 734:	cd 2b       	or	r28, r29

00000736 <.LBB149>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 736:	cf 70       	andi	r28, 0x0F	; 15

00000738 <.LVL41>:
 738:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000073c <.LBE149>:

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	bf 91       	pop	r27
 746:	af 91       	pop	r26
 748:	9f 91       	pop	r25
 74a:	8f 91       	pop	r24
 74c:	7f 91       	pop	r23
 74e:	6f 91       	pop	r22
 750:	5f 91       	pop	r21
 752:	4f 91       	pop	r20
 754:	3f 91       	pop	r19
 756:	2f 91       	pop	r18
 758:	0f 90       	pop	r0
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	0f 90       	pop	r0
 75e:	1f 90       	pop	r1
 760:	18 95       	reti

00000762 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 762:	1f 93       	push	r17

00000764 <.LCFI0>:
 764:	cf 93       	push	r28

00000766 <.LCFI1>:
 766:	df 93       	push	r29

00000768 <.LCFI2>:
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62

0000076c <.LCFI3>:
 76c:	aa 97       	sbiw	r28, 0x2a	; 42

0000076e <.LCFI4>:
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	f8 94       	cli
 772:	de bf       	out	0x3e, r29	; 62
 774:	0f be       	out	0x3f, r0	; 63
 776:	cd bf       	out	0x3d, r28	; 61

00000778 <.LBB172>:
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 778:	8b e1       	ldi	r24, 0x1B	; 27
 77a:	91 e0       	ldi	r25, 0x01	; 1

0000077c <.L2>:

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 77c:	fc 01       	movw	r30, r24

0000077e <.Loc.7>:
 77e:	01 96       	adiw	r24, 0x01	; 1

00000780 <.LBB173>:
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 780:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

00000784 <.LBE173>:
 784:	20 83       	st	Z, r18

00000786 <.Loc.12>:
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 786:	21 e0       	ldi	r18, 0x01	; 1
 788:	83 32       	cpi	r24, 0x23	; 35
 78a:	92 07       	cpc	r25, r18
 78c:	b9 f7       	brne	.-18     	; 0x77c <.L2>

0000078e <.LBE175>:
	#endif

	EVENT_USB_Device_ControlRequest();
 78e:	e4 dc       	rcall	.-1592   	; 0x158 <EVENT_USB_Device_ControlRequest>

00000790 <.LBB176>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 790:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000794 <.LBE176>:

	if (Endpoint_IsSETUPReceived())
 794:	83 ff       	sbrs	r24, 3
 796:	10 c0       	rjmp	.+32     	; 0x7b8 <.L3>

00000798 <.LBB178>:
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 798:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>

0000079c <.LVL5>:

		switch (USB_ControlRequest.bRequest)
 79c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <USB_ControlRequest+0x1>

000007a0 <.Loc.25>:
 7a0:	95 30       	cpi	r25, 0x05	; 5
 7a2:	09 f4       	brne	.+2      	; 0x7a6 <L0^A+0x2>

000007a4 <L0^A>:
 7a4:	c2 c0       	rjmp	.+388    	; 0x92a <.L4>
 7a6:	00 f5       	brcc	.+64     	; 0x7e8 <.L5>
 7a8:	29 2f       	mov	r18, r25
 7aa:	2d 7f       	andi	r18, 0xFD	; 253
 7ac:	21 30       	cpi	r18, 0x01	; 1
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <L0^A+0x2>

000007b0 <L0^A>:
 7b0:	89 c0       	rjmp	.+274    	; 0x8c4 <.L6>
 7b2:	99 23       	and	r25, r25
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <.L3>

000007b6 <L0^A>:
 7b6:	5e c0       	rjmp	.+188    	; 0x874 <.L7>

000007b8 <.L3>:
 7b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000007bc <.LBE276>:
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 7bc:	83 ff       	sbrs	r24, 3
 7be:	0a c0       	rjmp	.+20     	; 0x7d4 <.L1>

000007c0 <.LBB278>:
				UEINTX &= ~(1 << RXSTPI);
 7c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 7c4:	87 7f       	andi	r24, 0xF7	; 247
 7c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000007ca <.LBB280>:
				UECONX |= (1 << STALLRQ);
 7ca:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 7ce:	80 62       	ori	r24, 0x20	; 32
 7d0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

000007d4 <.L1>:
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 7d4:	aa 96       	adiw	r28, 0x2a	; 42
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	de bf       	out	0x3e, r29	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	cd bf       	out	0x3d, r28	; 61
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	1f 91       	pop	r17
 7e6:	08 95       	ret

000007e8 <.L5>:
		switch (USB_ControlRequest.bRequest)
 7e8:	98 30       	cpi	r25, 0x08	; 8
 7ea:	09 f4       	brne	.+2      	; 0x7ee <L0^A+0x2>

000007ec <L0^A>:
 7ec:	d5 c0       	rjmp	.+426    	; 0x998 <.L8>
 7ee:	99 30       	cpi	r25, 0x09	; 9
 7f0:	09 f4       	brne	.+2      	; 0x7f4 <L0^A+0x2>

000007f2 <L0^A>:
 7f2:	df c0       	rjmp	.+446    	; 0x9b2 <.L9>
 7f4:	96 30       	cpi	r25, 0x06	; 6
 7f6:	01 f7       	brne	.-64     	; 0x7b8 <.L3>

000007f8 <.Loc.42>:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7f8:	80 58       	subi	r24, 0x80	; 128

000007fa <.LVL8>:
 7fa:	82 30       	cpi	r24, 0x02	; 2
 7fc:	e8 f6       	brcc	.-70     	; 0x7b8 <.L3>

000007fe <.LBB179>:
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 7fe:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 802:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x3>

00000806 <.Loc.51>:
 806:	8c 3d       	cpi	r24, 0xDC	; 220
 808:	23 e0       	ldi	r18, 0x03	; 3
 80a:	92 07       	cpc	r25, r18
 80c:	09 f0       	breq	.+2      	; 0x810 <.LBB181>

0000080e <L0^A>:
 80e:	af c0       	rjmp	.+350    	; 0x96e <.L22>

00000810 <.LBB181>:
	SignatureDescriptor.Header.Type = DTYPE_String;
 810:	83 e0       	ldi	r24, 0x03	; 3
 812:	8a 83       	std	Y+2, r24	; 0x02

00000814 <.Loc.57>:
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 814:	8a e2       	ldi	r24, 0x2A	; 42
 816:	89 83       	std	Y+1, r24	; 0x01

00000818 <.LBB183>:
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 818:	4f b7       	in	r20, 0x3f	; 63

0000081a <.LBB187>:
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 81a:	f8 94       	cli

0000081c <.LBB189>:
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 81c:	de 01       	movw	r26, r28
 81e:	13 96       	adiw	r26, 0x03	; 3

00000820 <.Loc.79>:
 820:	20 e0       	ldi	r18, 0x00	; 0

00000822 <.LBE189>:
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 822:	3e e0       	ldi	r19, 0x0E	; 14

00000824 <.LBB190>:
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 824:	51 e2       	ldi	r21, 0x21	; 33

00000826 <.L26>:
 826:	e3 2f       	mov	r30, r19
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 82e:	e4 91       	lpm	r30, Z

00000830 <.LBE192>:

					if (SerialCharNum & 0x01)
 830:	20 ff       	sbrs	r18, 0
 832:	03 c0       	rjmp	.+6      	; 0x83a <.L23>

00000834 <.Loc.90>:
					{
						SerialByte >>= 4;
 834:	e2 95       	swap	r30

00000836 <.LVL14>:
 836:	ef 70       	andi	r30, 0x0F	; 15

00000838 <.LVL15>:
						SigReadAddress++;
 838:	3f 5f       	subi	r19, 0xFF	; 255

0000083a <.L23>:
					}

					SerialByte &= 0x0F;
 83a:	ef 70       	andi	r30, 0x0F	; 15

0000083c <.Loc.97>:

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 83c:	8e 2f       	mov	r24, r30
 83e:	90 e0       	ldi	r25, 0x00	; 0

00000840 <.Loc.98>:
 840:	ea 30       	cpi	r30, 0x0A	; 10
 842:	08 f4       	brcc	.+2      	; 0x846 <.Loc.99>

00000844 <L0^A>:
 844:	92 c0       	rjmp	.+292    	; 0x96a <.L24>

00000846 <.Loc.99>:
 846:	c7 96       	adiw	r24, 0x37	; 55

00000848 <.L25>:
 848:	8d 93       	st	X+, r24
 84a:	9d 93       	st	X+, r25

0000084c <.LBE190>:
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 84c:	2f 5f       	subi	r18, 0xFF	; 255

0000084e <.Loc.103>:
 84e:	24 31       	cpi	r18, 0x14	; 20
 850:	51 f7       	brne	.-44     	; 0x826 <.L26>

00000852 <.LBB195>:
				SREG = GlobalIntState;
 852:	4f bf       	out	0x3f, r20	; 63

00000854 <.LBB199>:
				UEINTX &= ~(1 << RXSTPI);
 854:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 858:	87 7f       	andi	r24, 0xF7	; 247
 85a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000085e <.LBE199>:
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 85e:	6a e2       	ldi	r22, 0x2A	; 42
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	ce 01       	movw	r24, r28
 864:	01 96       	adiw	r24, 0x01	; 1
 866:	44 dd       	rcall	.-1400   	; 0x2f0 <Endpoint_Write_Control_Stream_LE>

00000868 <.L61>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 868:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 86c:	8b 77       	andi	r24, 0x7B	; 123
 86e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000872 <.LBE205>:
 872:	a2 cf       	rjmp	.-188    	; 0x7b8 <.L3>

00000874 <.L7>:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 874:	80 38       	cpi	r24, 0x80	; 128
 876:	99 f0       	breq	.+38     	; 0x89e <.L11>

00000878 <.Loc.130>:
 878:	82 38       	cpi	r24, 0x82	; 130
 87a:	09 f0       	breq	.+2      	; 0x87e <.LBB211>

0000087c <L0^A>:
 87c:	9d cf       	rjmp	.-198    	; 0x7b8 <.L3>

0000087e <.LBB211>:
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 87e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x4>

00000882 <.LVL25>:
 882:	8f 70       	andi	r24, 0x0F	; 15

00000884 <.LVL26>:

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 884:	85 30       	cpi	r24, 0x05	; 5
 886:	08 f0       	brcs	.+2      	; 0x88a <.LBB214>

00000888 <L0^A>:
 888:	97 cf       	rjmp	.-210    	; 0x7b8 <.L3>

0000088a <.LBB214>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 88a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000088e <.LBB216>:
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 88e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000892 <.LVL29>:
 892:	85 fb       	bst	r24, 5
 894:	88 27       	eor	r24, r24
 896:	80 f9       	bld	r24, 0

00000898 <.LBB218>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 898:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000089c <.LVL31>:
			}
 89c:	06 c0       	rjmp	.+12     	; 0x8aa <.L13>

0000089e <.L11>:
	uint8_t CurrentStatus = 0;
 89e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_Device_CurrentlySelfPowered>

000008a2 <.LVL33>:
			if (USB_Device_RemoteWakeupEnabled)
 8a2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <USB_Device_RemoteWakeupEnabled>
 8a6:	91 11       	cpse	r25, r1

000008a8 <.Loc.161>:
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 8a8:	82 60       	ori	r24, 0x02	; 2

000008aa <.L13>:
				UEINTX &= ~(1 << RXSTPI);
 8aa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 8ae:	97 7f       	andi	r25, 0xF7	; 247
 8b0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000008b4 <.LBB222>:
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 8b4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

000008b8 <.Loc.171>:
				UEDATX = (Data >> 8);
 8b8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

000008bc <.L62>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 8c0:	8e 77       	andi	r24, 0x7E	; 126
 8c2:	a5 c0       	rjmp	.+330    	; 0xa0e <.L60>

000008c4 <.L6>:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8c4:	88 23       	and	r24, r24
 8c6:	09 f4       	brne	.+2      	; 0x8ca <.Loc.185>

000008c8 <L0^A>:
 8c8:	92 c0       	rjmp	.+292    	; 0x9ee <.L14>

000008ca <.Loc.185>:
 8ca:	82 30       	cpi	r24, 0x02	; 2
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <.LBB235>

000008ce <L0^A>:
 8ce:	74 cf       	rjmp	.-280    	; 0x7b8 <.L3>

000008d0 <.LBB235>:
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 8d0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>

000008d4 <.LVL38>:
 8d4:	81 11       	cpse	r24, r1
 8d6:	96 c0       	rjmp	.+300    	; 0xa04 <.L17>

000008d8 <.LBB237>:
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 8d8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
 8dc:	8f 70       	andi	r24, 0x0F	; 15

000008de <.LVL39>:

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 8de:	2f ef       	ldi	r18, 0xFF	; 255
 8e0:	28 0f       	add	r18, r24

000008e2 <.Loc.196>:
 8e2:	24 30       	cpi	r18, 0x04	; 4
 8e4:	08 f0       	brcs	.+2      	; 0x8e8 <.LBB238>

000008e6 <L0^A>:
 8e6:	68 cf       	rjmp	.-304    	; 0x7b8 <.L3>

000008e8 <.LBB238>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8e8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000008ec <.LBB240>:
				return ((UECONX & (1 << EPEN)) ? true : false);
 8ec:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

000008f0 <.LBE240>:
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 8f0:	20 ff       	sbrs	r18, 0
 8f2:	88 c0       	rjmp	.+272    	; 0xa04 <.L17>

000008f4 <.Loc.207>:
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 8f4:	93 30       	cpi	r25, 0x03	; 3
 8f6:	31 f4       	brne	.+12     	; 0x904 <.L19>

000008f8 <.LBB242>:
				UECONX |= (1 << STALLRQ);
 8f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

000008fc <.LVL42>:
 8fc:	80 62       	ori	r24, 0x20	; 32

000008fe <.L59>:
				UECONX |= (1 << RSTDT);
 8fe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000902 <.Loc.216>:
			}
 902:	80 c0       	rjmp	.+256    	; 0xa04 <.L17>

00000904 <.L19>:
				UECONX |= (1 << STALLRQC);
 904:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 908:	90 61       	ori	r25, 0x10	; 16
 90a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

0000090e <.LBB249>:
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 90e:	21 e0       	ldi	r18, 0x01	; 1
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	01 c0       	rjmp	.+2      	; 0x916 <.L2^B1>

00000914 <.L1^B1>:
 914:	22 0f       	add	r18, r18

00000916 <.L2^B1>:
 916:	8a 95       	dec	r24
 918:	ea f7       	brpl	.-6      	; 0x914 <.L1^B1>

0000091a <.Loc.226>:
 91a:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>

0000091e <.Loc.227>:
				UERST = 0;
 91e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>

00000922 <.LBB251>:
				UECONX |= (1 << RSTDT);
 922:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000926 <.LVL47>:
 926:	88 60       	ori	r24, 0x08	; 8
 928:	ea cf       	rjmp	.-44     	; 0x8fe <.L59>

0000092a <.L4>:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 92a:	81 11       	cpse	r24, r1
 92c:	45 cf       	rjmp	.-374    	; 0x7b8 <.L3>

0000092e <.LBB257>:
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 92e:	10 91 1d 01 	lds	r17, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 932:	1f 77       	andi	r17, 0x7F	; 127

00000934 <.LBB259>:
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 934:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

00000938 <.LVL50>:
 938:	80 78       	andi	r24, 0x80	; 128

0000093a <.Loc.247>:
 93a:	81 2b       	or	r24, r17

0000093c <.Loc.248>:
 93c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

00000940 <.LBB261>:
				UEINTX &= ~(1 << RXSTPI);
 940:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 944:	87 7f       	andi	r24, 0xF7	; 247
 946:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000094a <.LBE261>:
	Endpoint_ClearStatusStage();
 94a:	b9 dd       	rcall	.-1166   	; 0x4be <Endpoint_ClearStatusStage>

0000094c <.L20>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 94c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000950 <.LBE263>:
	while (!(Endpoint_IsINReady()));
 950:	80 ff       	sbrs	r24, 0
 952:	fc cf       	rjmp	.-8      	; 0x94c <.L20>

00000954 <.LBB265>:
				UDADDR |= (1 << ADDEN);
 954:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 958:	80 68       	ori	r24, 0x80	; 128
 95a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

0000095e <.LBE265>:
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 95e:	82 e0       	ldi	r24, 0x02	; 2
 960:	11 11       	cpse	r17, r1
 962:	83 e0       	ldi	r24, 0x03	; 3
 964:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>

00000968 <.Loc.270>:
}
 968:	27 cf       	rjmp	.-434    	; 0x7b8 <.L3>

0000096a <.L24>:
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 96a:	c0 96       	adiw	r24, 0x30	; 48

0000096c <.LVL56>:
 96c:	6d cf       	rjmp	.-294    	; 0x848 <.L25>

0000096e <.L22>:
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 96e:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
 972:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <USB_ControlRequest+0x5>
 976:	ae 01       	movw	r20, r28
 978:	4f 5f       	subi	r20, 0xFF	; 255
 97a:	5f 4f       	sbci	r21, 0xFF	; 255
 97c:	88 dc       	rcall	.-1776   	; 0x28e <CALLBACK_USB_GetDescriptor>

0000097e <.LVL58>:
 97e:	bc 01       	movw	r22, r24

00000980 <.LVL59>:
 980:	89 2b       	or	r24, r25
 982:	09 f4       	brne	.+2      	; 0x986 <.LBB208>

00000984 <L0^A>:
 984:	19 cf       	rjmp	.-462    	; 0x7b8 <.L3>

00000986 <.LBB208>:
				UEINTX &= ~(1 << RXSTPI);
 986:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 98a:	87 7f       	andi	r24, 0xF7	; 247
 98c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000990 <.LBE208>:
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 990:	89 81       	ldd	r24, Y+1	; 0x01
 992:	9a 81       	ldd	r25, Y+2	; 0x02
 994:	06 dd       	rcall	.-1524   	; 0x3a2 <Endpoint_Write_Control_PStream_LE>

00000996 <.LVL60>:
 996:	68 cf       	rjmp	.-304    	; 0x868 <.L61>

00000998 <.L8>:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 998:	80 38       	cpi	r24, 0x80	; 128
 99a:	09 f0       	breq	.+2      	; 0x99e <.LBB230>

0000099c <L0^A>:
 99c:	0d cf       	rjmp	.-486    	; 0x7b8 <.L3>

0000099e <.LBB230>:
 99e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000009a2 <.LVL62>:
 9a2:	87 7f       	andi	r24, 0xF7	; 247
 9a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000009a8 <.LBE230>:
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 9a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_ConfigurationNumber>

000009ac <.LBB232>:
				UEDATX = Data;
 9ac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 9b0:	85 cf       	rjmp	.-246    	; 0x8bc <.L62>

000009b2 <.L9>:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9b2:	81 11       	cpse	r24, r1
 9b4:	01 cf       	rjmp	.-510    	; 0x7b8 <.L3>

000009b6 <.LBB269>:
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 9b6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 9ba:	92 30       	cpi	r25, 0x02	; 2
 9bc:	08 f0       	brcs	.+2      	; 0x9c0 <.LBB271>

000009be <L0^A>:
 9be:	fc ce       	rjmp	.-520    	; 0x7b8 <.L3>

000009c0 <.LBB271>:
				UEINTX &= ~(1 << RXSTPI);
 9c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000009c4 <.LVL66>:
 9c4:	87 7f       	andi	r24, 0xF7	; 247
 9c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000009ca <.LBE271>:
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 9ca:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <USB_Device_ConfigurationNumber>

000009ce <.Loc.315>:
	Endpoint_ClearStatusStage();
 9ce:	77 dd       	rcall	.-1298   	; 0x4be <Endpoint_ClearStatusStage>

000009d0 <.LVL68>:
	if (USB_Device_ConfigurationNumber)
 9d0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_ConfigurationNumber>
 9d4:	88 23       	and	r24, r24
 9d6:	11 f0       	breq	.+4      	; 0x9dc <.L28>

000009d8 <.L36>:
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9d8:	84 e0       	ldi	r24, 0x04	; 4
 9da:	05 c0       	rjmp	.+10     	; 0x9e6 <.L30>

000009dc <.L28>:
				return (UDADDR & (1 << ADDEN));
 9dc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

000009e0 <.LBE273>:
 9e0:	87 fd       	sbrc	r24, 7
 9e2:	fa cf       	rjmp	.-12     	; 0x9d8 <.L36>
 9e4:	81 e0       	ldi	r24, 0x01	; 1

000009e6 <.L30>:
 9e6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>

000009ea <.Loc.324>:
	EVENT_USB_Device_ConfigurationChanged();
 9ea:	ae db       	rcall	.-2212   	; 0x148 <EVENT_USB_Device_ConfigurationChanged>

000009ec <.LVL69>:
 9ec:	e5 ce       	rjmp	.-566    	; 0x7b8 <.L3>

000009ee <.L14>:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9ee:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>

000009f2 <.LVL71>:
 9f2:	81 30       	cpi	r24, 0x01	; 1
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <.Loc.332>

000009f6 <L0^A>:
 9f6:	e0 ce       	rjmp	.-576    	; 0x7b8 <.L3>

000009f8 <.Loc.332>:
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	93 30       	cpi	r25, 0x03	; 3
 9fc:	09 f0       	breq	.+2      	; 0xa00 <.L16>
 9fe:	80 e0       	ldi	r24, 0x00	; 0

00000a00 <.L16>:
 a00:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_Device_RemoteWakeupEnabled>

00000a04 <.L17>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a04:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000a08 <.LBB254>:
				UEINTX &= ~(1 << RXSTPI);
 a08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a0c:	87 7f       	andi	r24, 0xF7	; 247

00000a0e <.L60>:
 a0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000a12 <.LBE254>:

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a12:	55 dd       	rcall	.-1366   	; 0x4be <Endpoint_ClearStatusStage>

00000a14 <.LVL74>:
 a14:	d1 ce       	rjmp	.-606    	; 0x7b8 <.L3>

00000a16 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 a16:	08 95       	ret

00000a18 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 a18:	cf 93       	push	r28

00000a1a <.LBB26>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 a1a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

00000a1e <.Loc.5>:
 a1e:	88 23       	and	r24, r24
 a20:	99 f0       	breq	.+38     	; 0xa48 <.L1>

00000a22 <.LBB28>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a22:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000a26 <.Loc.10>:
 a26:	cf 70       	andi	r28, 0x0F	; 15

00000a28 <.LBB30>:
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 a28:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

00000a2c <.Loc.14>:
 a2c:	89 2f       	mov	r24, r25
 a2e:	81 70       	andi	r24, 0x01	; 1
 a30:	90 fd       	sbrc	r25, 0
 a32:	80 e8       	ldi	r24, 0x80	; 128

00000a34 <.LBE30>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a34:	c8 2b       	or	r28, r24

00000a36 <.LBB32>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a36:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000a3a <.LBB34>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000a3e <.LBE34>:

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 a3e:	83 fd       	sbrc	r24, 3

00000a40 <.Loc.27>:
	  USB_Device_ProcessControlRequest();
 a40:	90 de       	rcall	.-736    	; 0x762 <USB_Device_ProcessControlRequest>

00000a42 <.LBB36>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a42:	cf 70       	andi	r28, 0x0F	; 15

00000a44 <.LVL3>:
 a44:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000a48 <.L1>:
}
 a48:	cf 91       	pop	r28
 a4a:	08 95       	ret

00000a4c <strncmp>:
 a4c:	fb 01       	movw	r30, r22
 a4e:	dc 01       	movw	r26, r24

00000a50 <.L_strncmp_loop>:
 a50:	41 50       	subi	r20, 0x01	; 1
 a52:	50 40       	sbci	r21, 0x00	; 0
 a54:	30 f0       	brcs	.+12     	; 0xa62 <.L_strncmp_equal>
 a56:	8d 91       	ld	r24, X+
 a58:	01 90       	ld	r0, Z+
 a5a:	80 19       	sub	r24, r0
 a5c:	19 f4       	brne	.+6      	; 0xa64 <.L_strncmp_done>
 a5e:	00 20       	and	r0, r0
 a60:	b9 f7       	brne	.-18     	; 0xa50 <.L_strncmp_loop>

00000a62 <.L_strncmp_equal>:
 a62:	88 1b       	sub	r24, r24

00000a64 <.L_strncmp_done>:
 a64:	99 0b       	sbc	r25, r25
 a66:	08 95       	ret

00000a68 <_exit>:
 a68:	f8 94       	cli

00000a6a <__stop_program>:
 a6a:	ff cf       	rjmp	.-2      	; 0xa6a <__stop_program>
