
Echo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000009b2  00000a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080010a  0080010a  00000a50  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000298  00000000  00000000  00000ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00005a8d  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001a77  00000000  00000000  000067dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00006992  00000000  00000000  00008254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000006f0  00000000  00000000  0000ebe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001d8a  00000000  00000000  0000f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000037ad  00000000  00000000  00011062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000560  00000000  00000000  0001480f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	56 c2       	rjmp	.+1196   	; 0x4da <__vector_11>
  2e:	00 00       	nop
  30:	fd c2       	rjmp	.+1530   	; 0x62c <__vector_12>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	14 03 4c 00 55 00 46 00 41 00 20 00 45 00 63 00     ..L.U.F.A. .E.c.
  84:	68 00 6f 00 00 00                                   h.o...

0000008a <ManufacturerString>:
  8a:	1a 03 4c 00 55 00 46 00 41 00 20 00 4c 00 69 00     ..L.U.F.A. .L.i.
  9a:	62 00 72 00 61 00 72 00 79 00 00 00                 b.r.a.r.y...

000000a6 <LanguageString>:
  a6:	04 03 09 04                                         ....

000000aa <ConfigurationDescriptor>:
  aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff ff     .. .....2.......
  ba:	ff 00 07 05 81 03 01 00 05 07 05 02 03 0a 00 05     ................

000000ca <DeviceDescriptor>:
  ca:	12 01 10 01 00 00 00 08 42 42 02 00 01 00 01 02     ........BB......
  da:	dc 01                                               ..

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d2 e0       	ldi	r29, 0x02	; 2
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1

000000ea <.Loc.1>:
  ea:	a0 e0       	ldi	r26, 0x00	; 0

000000ec <.Loc.2>:
  ec:	b1 e0       	ldi	r27, 0x01	; 1

000000ee <.Loc.3>:
  ee:	e2 eb       	ldi	r30, 0xB2	; 178

000000f0 <.Loc.4>:
  f0:	f9 e0       	ldi	r31, 0x09	; 9

000000f2 <.Loc.5>:
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <.L__do_copy_data_start>

000000f4 <.L__do_copy_data_loop>:
  f4:	05 90       	lpm	r0, Z+

000000f6 <.Loc.7>:
  f6:	0d 92       	st	X+, r0

000000f8 <.L__do_copy_data_start>:
  f8:	aa 30       	cpi	r26, 0x0A	; 10

000000fa <.Loc.9>:
  fa:	b1 07       	cpc	r27, r17

000000fc <.Loc.10>:
  fc:	d9 f7       	brne	.-10     	; 0xf4 <.L__do_copy_data_loop>

000000fe <__do_clear_bss>:
  fe:	21 e0       	ldi	r18, 0x01	; 1

00000100 <.Loc.1>:
 100:	aa e0       	ldi	r26, 0x0A	; 10

00000102 <.Loc.2>:
 102:	b1 e0       	ldi	r27, 0x01	; 1

00000104 <.Loc.3>:
 104:	01 c0       	rjmp	.+2      	; 0x108 <.Loc.5>

00000106 <.Loc.4>:
 106:	1d 92       	st	X+, r1

00000108 <.Loc.5>:
 108:	a1 32       	cpi	r26, 0x21	; 33

0000010a <.Loc.6>:
 10a:	b2 07       	cpc	r27, r18

0000010c <.Loc.7>:
 10c:	e1 f7       	brne	.-8      	; 0x106 <.Loc.4>

0000010e <L0^A>:
 10e:	56 d0       	rcall	.+172    	; 0x1bc <main>
 110:	4e c4       	rjmp	.+2204   	; 0x9ae <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 114:	84 b7       	in	r24, 0x34	; 52
 116:	87 7f       	andi	r24, 0xF7	; 247
 118:	84 bf       	out	0x34, r24	; 52

0000011a <.LBB38>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	a8 95       	wdr
 120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 124:	88 61       	ori	r24, 0x18	; 24
 126:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 12e:	0f be       	out	0x3f, r0	; 63

00000130 <.LBB41>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 140:	0f be       	out	0x3f, r0	; 63

00000142 <.LBE41>:

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	USB_Init();
 142:	bc c1       	rjmp	.+888    	; 0x4bc <USB_Init>

00000144 <EVENT_USB_Device_Connect>:
}

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
}
 144:	08 95       	ret

00000146 <EVENT_USB_Device_Disconnect>:
 146:	08 95       	ret

00000148 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 148:	42 e0       	ldi	r20, 0x02	; 2
 14a:	61 ec       	ldi	r22, 0xC1	; 193
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	2b d1       	rcall	.+598    	; 0x3a6 <Endpoint_ConfigureEndpoint_Prv>

00000150 <.LBB47>:
 150:	42 e1       	ldi	r20, 0x12	; 18
 152:	60 ec       	ldi	r22, 0xC0	; 192
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	27 c1       	rjmp	.+590    	; 0x3a6 <Endpoint_ConfigureEndpoint_Prv>

00000158 <EVENT_USB_Device_ControlRequest>:
 158:	08 95       	ret

0000015a <Handle_EP_IN>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000160 <.LBB53>:
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 160:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000164 <.LBE53>:
{
	/* Select the IN Endpoint */
	Endpoint_SelectEndpoint(ECHO_IN_EPADDR);

	/* Check if IN Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 164:	85 ff       	sbrs	r24, 5
 166:	0c c0       	rjmp	.+24     	; 0x180 <.L6>

00000168 <.Loc.52>:
	{
		/* Write Keyboard Report Data */
		// Résultat de la comparaison: if string is like token, return 0, else return 1
		Endpoint_Write_8(strcmp(EP_Data, token));
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	71 e0       	ldi	r23, 0x01	; 1
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	15 d4       	rcall	.+2090   	; 0x99c <strcmp>

00000172 <.LBB55>:
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 172:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

00000176 <.LBB57>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 176:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 17a:	8e 77       	andi	r24, 0x7E	; 126
 17c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000180 <.L6>:

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 180:	08 95       	ret

00000182 <Handle_EP_OUT>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000188 <.LBB61>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 188:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000018c <.LBE61>:
{
	/* Select the OUT Endpoint */
	Endpoint_SelectEndpoint(ECHO_OUT_EPADDR);

	/* Check if Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
 18c:	82 ff       	sbrs	r24, 2
 18e:	15 c0       	rjmp	.+42     	; 0x1ba <.L11>

00000190 <.LBB63>:
				return ((UEINTX & (1 << RWAL)) ? true : false);
 190:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000194 <.LBE63>:
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 194:	85 ff       	sbrs	r24, 5
 196:	0c c0       	rjmp	.+24     	; 0x1b0 <.L13>

00000198 <.LBB65>:
		{
			/* Read in the LED report from the host */
			// Envoi du mdp
			for (int i = 0; i < 10; i++)
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0

0000019c <.L14>:
				return UEDATX;
 19c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

000001a0 <.LBE66>:
			{
				EP_Data[i] = Endpoint_Read_8();
 1a0:	fc 01       	movw	r30, r24
 1a2:	e6 5f       	subi	r30, 0xF6	; 246
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	20 83       	st	Z, r18

000001a8 <.Loc.85>:
			for (int i = 0; i < 10; i++)
 1a8:	01 96       	adiw	r24, 0x01	; 1

000001aa <.Loc.87>:
 1aa:	8a 30       	cpi	r24, 0x0A	; 10
 1ac:	91 05       	cpc	r25, r1
 1ae:	b1 f7       	brne	.-20     	; 0x19c <.L14>

000001b0 <.L13>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 1b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 1b4:	8b 77       	andi	r24, 0x7B	; 123
 1b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000001ba <.L11>:
		}

		/* Handshake the OUT Endpoint - clear endpoint */
		Endpoint_ClearOUT();
	}
}
 1ba:	08 95       	ret

000001bc <main>:
	CLKSEL0 = 0b00010101;   // sélection de l'horloge externe
 1bc:	85 e1       	ldi	r24, 0x15	; 21
 1be:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__DATA_REGION_ORIGIN__+0x70>

000001c2 <.Loc.98>:
	CLKSEL1 = 0b00001111;   // minimum de 8Mhz
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>

000001c8 <.Loc.100>:
	CLKPR = 0b10000000;     // modification du diviseur d'horloge (CLKPCE=1)
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>

000001ce <.Loc.102>:
	CLKPR = 0;              // 0 pour pas de diviseur (diviseur de 1)
 1ce:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>

000001d2 <.Loc.104>:
	SetupHardware();
 1d2:	a0 df       	rcall	.-192    	; 0x114 <SetupHardware>

000001d4 <.LBB70>:
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 1d4:	78 94       	sei

000001d6 <.L23>:
		Handle_EP_IN();
 1d6:	c1 df       	rcall	.-126    	; 0x15a <Handle_EP_IN>

000001d8 <.LVL16>:
		Handle_EP_OUT();
 1d8:	d4 df       	rcall	.-88     	; 0x182 <Handle_EP_OUT>

000001da <.LVL17>:
		USB_USBTask();
 1da:	c6 d3       	rcall	.+1932   	; 0x968 <USB_USBTask>

000001dc <.LVL18>:
	for (;;)
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <.L23>

000001de <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
 1de:	9c 01       	movw	r18, r24
 1e0:	da 01       	movw	r26, r20

000001e2 <.Loc.2>:
	const uint8_t  DescriptorType   = (wValue >> 8);
 1e2:	83 2f       	mov	r24, r19
 1e4:	99 27       	eor	r25, r25

000001e6 <.LVL1>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	91 05       	cpc	r25, r1
 1ea:	29 f1       	breq	.+74     	; 0x236 <.L6>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	91 05       	cpc	r25, r1
 1f0:	49 f0       	breq	.+18     	; 0x204 <.L3>
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	91 f4       	brne	.+36     	; 0x21a <.L8>
 1f6:	82 e1       	ldi	r24, 0x12	; 18
 1f8:	90 e0       	ldi	r25, 0x00	; 0

000001fa <.LVL2>:
 1fa:	2a ec       	ldi	r18, 0xCA	; 202
 1fc:	30 e0       	ldi	r19, 0x00	; 0

000001fe <.L2>:
			}

			break;
	}

	*DescriptorAddress = Address;
 1fe:	2d 93       	st	X+, r18
 200:	3c 93       	st	X, r19

00000202 <.Loc.11>:
	return Size;
}
 202:	08 95       	ret

00000204 <.L3>:
			switch (DescriptorNumber)
 204:	c9 01       	movw	r24, r18

00000206 <.LVL5>:
 206:	99 27       	eor	r25, r25
 208:	21 30       	cpi	r18, 0x01	; 1
 20a:	61 f0       	breq	.+24     	; 0x224 <.L4>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	91 05       	cpc	r25, r1
 210:	79 f0       	breq	.+30     	; 0x230 <.L5>

00000212 <.LBB2>:
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 212:	e6 ea       	ldi	r30, 0xA6	; 166
 214:	f0 e0       	ldi	r31, 0x00	; 0

00000216 <.LBE2>:
 216:	89 2b       	or	r24, r25
 218:	39 f0       	breq	.+14     	; 0x228 <.L9>

0000021a <.L8>:
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	20 e0       	ldi	r18, 0x00	; 0

00000222 <.LVL6>:
 222:	ed cf       	rjmp	.-38     	; 0x1fe <.L2>

00000224 <.L4>:
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 224:	ea e8       	ldi	r30, 0x8A	; 138
 226:	f0 e0       	ldi	r31, 0x00	; 0

00000228 <.L9>:
 228:	84 91       	lpm	r24, Z

0000022a <.LBE3>:
 22a:	90 e0       	ldi	r25, 0x00	; 0

0000022c <.LVL10>:
					Address = &ManufacturerString;
 22c:	9f 01       	movw	r18, r30

0000022e <.LVL11>:
					break;
 22e:	e7 cf       	rjmp	.-50     	; 0x1fe <.L2>

00000230 <.L5>:
					Size    = pgm_read_byte(&ProductString.Header.Size);
 230:	e4 e7       	ldi	r30, 0x74	; 116
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	f9 cf       	rjmp	.-14     	; 0x228 <.L9>

00000236 <.L6>:
			Size    = sizeof(USB_Descriptor_Configuration_t);
 236:	80 e2       	ldi	r24, 0x20	; 32
 238:	90 e0       	ldi	r25, 0x00	; 0

0000023a <.LVL14>:
			Address = &ConfigurationDescriptor;
 23a:	2a ea       	ldi	r18, 0xAA	; 170
 23c:	30 e0       	ldi	r19, 0x00	; 0

0000023e <.LVL15>:
 23e:	df cf       	rjmp	.-66     	; 0x1fe <.L2>

00000240 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 240:	fc 01       	movw	r30, r24
 242:	cb 01       	movw	r24, r22

00000244 <.LVL228>:
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 244:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <USB_ControlRequest+0x6>
 248:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <USB_ControlRequest+0x7>

0000024c <.Loc.636>:
 24c:	26 17       	cp	r18, r22
 24e:	37 07       	cpc	r19, r23
 250:	90 f0       	brcs	.+36     	; 0x276 <.L157>

00000252 <.Loc.637>:
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	29 f4       	brne	.+10     	; 0x260 <.L146>

00000256 <.LBB342>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 256:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 25a:	2e 77       	andi	r18, 0x7E	; 126
 25c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000260 <.L146>:
 260:	40 e0       	ldi	r20, 0x00	; 0

00000262 <.L150>:
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 262:	00 97       	sbiw	r24, 0x00	; 0
 264:	51 f4       	brne	.+20     	; 0x27a <.L155>

00000266 <.Loc.645>:
 266:	41 11       	cpse	r20, r1
 268:	08 c0       	rjmp	.+16     	; 0x27a <.L155>

0000026a <.L169>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 26a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000026e <.LBE344>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 26e:	82 ff       	sbrs	r24, 2
 270:	30 c0       	rjmp	.+96     	; 0x2d2 <.L156>

00000272 <.Loc.651>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret

00000276 <.L157>:
 276:	c9 01       	movw	r24, r18
 278:	f3 cf       	rjmp	.-26     	; 0x260 <.L146>

0000027a <.L155>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 27a:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <USB_DeviceState>

0000027e <.LVL233>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 27e:	22 23       	and	r18, r18
 280:	a1 f1       	breq	.+104    	; 0x2ea <.L161>

00000282 <.Loc.657>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 282:	25 30       	cpi	r18, 0x05	; 5
 284:	a1 f1       	breq	.+104    	; 0x2ee <.L162>

00000286 <.LBB347>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 286:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000028a <.LBE347>:
		else if (Endpoint_IsSETUPReceived())
 28a:	23 fd       	sbrc	r18, 3
 28c:	2c c0       	rjmp	.+88     	; 0x2e6 <.L163>

0000028e <.LBB349>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 28e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000292 <.LBE349>:
		else if (Endpoint_IsOUTReceived())
 292:	22 fd       	sbrc	r18, 2
 294:	ea cf       	rjmp	.-44     	; 0x26a <.L169>

00000296 <.LBB351>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 296:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000029a <.LBE351>:
		if (Endpoint_IsINReady())
 29a:	20 ff       	sbrs	r18, 0
 29c:	e2 cf       	rjmp	.-60     	; 0x262 <.L150>

0000029e <.LBB353>:
					return UEBCLX;
 29e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 2a2:	30 e0       	ldi	r19, 0x00	; 0

000002a4 <.L151>:
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	19 f0       	breq	.+6      	; 0x2ae <.L152>

000002a8 <.Loc.682>:
 2a8:	28 30       	cpi	r18, 0x08	; 8
 2aa:	31 05       	cpc	r19, r1
 2ac:	58 f0       	brcs	.+22     	; 0x2c4 <.L153>

000002ae <.L152>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	28 30       	cpi	r18, 0x08	; 8
 2b2:	31 05       	cpc	r19, r1
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <.L154>
 2b6:	40 e0       	ldi	r20, 0x00	; 0

000002b8 <.L154>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2b8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000002bc <.LVL237>:
 2bc:	2e 77       	andi	r18, 0x7E	; 126
 2be:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000002c2 <.LVL238>:
				#else
					UEINTX &= ~(1 << TXINI);
				#endif
			}
 2c2:	cf cf       	rjmp	.-98     	; 0x262 <.L150>

000002c4 <.L153>:
				TEMPLATE_TRANSFER_BYTE(DataStream);
 2c4:	41 91       	ld	r20, Z+

000002c6 <.LBB358>:
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 2c6:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

000002ca <.LBE358>:
				Length--;
 2ca:	01 97       	sbiw	r24, 0x01	; 1

000002cc <.Loc.700>:
				BytesInEndpoint++;
 2cc:	2f 5f       	subi	r18, 0xFF	; 255
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255

000002d0 <.Loc.702>:
 2d0:	e9 cf       	rjmp	.-46     	; 0x2a4 <.L151>

000002d2 <.L156>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 2d2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>

000002d6 <.LVL245>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 2d6:	88 23       	and	r24, r24
 2d8:	41 f0       	breq	.+16     	; 0x2ea <.L161>

000002da <.Loc.708>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 2da:	85 30       	cpi	r24, 0x05	; 5
 2dc:	41 f0       	breq	.+16     	; 0x2ee <.L162>

000002de <.LBB361>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 2de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000002e2 <.LBE361>:
		else if (Endpoint_IsSETUPReceived())
 2e2:	83 ff       	sbrs	r24, 3
 2e4:	c2 cf       	rjmp	.-124    	; 0x26a <.L169>

000002e6 <.L163>:
		  return ENDPOINT_RWCSTREAM_HostAborted;
 2e6:	81 e0       	ldi	r24, 0x01	; 1

000002e8 <.LBE363>:
}
 2e8:	08 95       	ret

000002ea <.L161>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	08 95       	ret

000002ee <.L162>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	08 95       	ret

000002f2 <Endpoint_Write_Control_PStream_LE>:
{
 2f2:	fc 01       	movw	r30, r24
 2f4:	cb 01       	movw	r24, r22

000002f6 <.LVL293>:
	if (Length > USB_ControlRequest.wLength)
 2f6:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <USB_ControlRequest+0x6>
 2fa:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <USB_ControlRequest+0x7>

000002fe <.Loc.941>:
 2fe:	26 17       	cp	r18, r22
 300:	37 07       	cpc	r19, r23
 302:	90 f0       	brcs	.+36     	; 0x328 <.L253>

00000304 <.Loc.942>:
	else if (!(Length))
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	29 f4       	brne	.+10     	; 0x312 <.L242>

00000308 <.LBB422>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 308:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 30c:	2e 77       	andi	r18, 0x7E	; 126
 30e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000312 <.L242>:
 312:	40 e0       	ldi	r20, 0x00	; 0

00000314 <.L246>:
	while (Length || LastPacketFull)
 314:	00 97       	sbiw	r24, 0x00	; 0
 316:	51 f4       	brne	.+20     	; 0x32c <.L251>

00000318 <.Loc.950>:
 318:	41 11       	cpse	r20, r1
 31a:	08 c0       	rjmp	.+16     	; 0x32c <.L251>

0000031c <.L265>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 31c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000320 <.LBE424>:
	while (!(Endpoint_IsOUTReceived()))
 320:	82 ff       	sbrs	r24, 2
 322:	31 c0       	rjmp	.+98     	; 0x386 <.L252>

00000324 <.Loc.956>:
	return ENDPOINT_RWCSTREAM_NoError;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret

00000328 <.L253>:
 328:	c9 01       	movw	r24, r18
 32a:	f3 cf       	rjmp	.-26     	; 0x312 <.L242>

0000032c <.L251>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 32c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <USB_DeviceState>

00000330 <.LVL298>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 330:	22 23       	and	r18, r18
 332:	a9 f1       	breq	.+106    	; 0x39e <.L257>

00000334 <.Loc.962>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 334:	25 30       	cpi	r18, 0x05	; 5
 336:	a9 f1       	breq	.+106    	; 0x3a2 <.L258>

00000338 <.LBB427>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 338:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000033c <.LBE427>:
		else if (Endpoint_IsSETUPReceived())
 33c:	23 fd       	sbrc	r18, 3
 33e:	2d c0       	rjmp	.+90     	; 0x39a <.L259>

00000340 <.LBB429>:
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 340:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000344 <.LBE429>:
		else if (Endpoint_IsOUTReceived())
 344:	22 fd       	sbrc	r18, 2
 346:	ea cf       	rjmp	.-44     	; 0x31c <.L265>

00000348 <.LBB431>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 348:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000034c <.LBE431>:
		if (Endpoint_IsINReady())
 34c:	20 ff       	sbrs	r18, 0
 34e:	e2 cf       	rjmp	.-60     	; 0x314 <.L246>

00000350 <.LBB433>:
					return UEBCLX;
 350:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 354:	30 e0       	ldi	r19, 0x00	; 0

00000356 <.L247>:
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 356:	00 97       	sbiw	r24, 0x00	; 0
 358:	19 f0       	breq	.+6      	; 0x360 <.L248>

0000035a <.Loc.987>:
 35a:	28 30       	cpi	r18, 0x08	; 8
 35c:	31 05       	cpc	r19, r1
 35e:	58 f0       	brcs	.+22     	; 0x376 <.L249>

00000360 <.L248>:
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	28 30       	cpi	r18, 0x08	; 8
 364:	31 05       	cpc	r19, r1
 366:	09 f0       	breq	.+2      	; 0x36a <.L250>
 368:	40 e0       	ldi	r20, 0x00	; 0

0000036a <.L250>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 36a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000036e <.LVL302>:
 36e:	2e 77       	andi	r18, 0x7E	; 126
 370:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000374 <.LVL303>:
			}
 374:	cf cf       	rjmp	.-98     	; 0x314 <.L246>

00000376 <.L249>:
				TEMPLATE_TRANSFER_BYTE(DataStream);
 376:	44 91       	lpm	r20, Z

00000378 <.LBB439>:
				UEDATX = Data;
 378:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

0000037c <.LBE439>:
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 37c:	31 96       	adiw	r30, 0x01	; 1

0000037e <.LVL307>:
				Length--;
 37e:	01 97       	sbiw	r24, 0x01	; 1

00000380 <.Loc.1010>:
				BytesInEndpoint++;
 380:	2f 5f       	subi	r18, 0xFF	; 255
 382:	3f 4f       	sbci	r19, 0xFF	; 255

00000384 <.Loc.1012>:
 384:	e8 cf       	rjmp	.-48     	; 0x356 <.L247>

00000386 <.L252>:
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 386:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>

0000038a <.LVL311>:
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 38a:	88 23       	and	r24, r24
 38c:	41 f0       	breq	.+16     	; 0x39e <.L257>

0000038e <.Loc.1018>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 38e:	85 30       	cpi	r24, 0x05	; 5
 390:	41 f0       	breq	.+16     	; 0x3a2 <.L258>

00000392 <.LBB442>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 392:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000396 <.LBE442>:
		else if (Endpoint_IsSETUPReceived())
 396:	83 ff       	sbrs	r24, 3
 398:	c1 cf       	rjmp	.-126    	; 0x31c <.L265>

0000039a <.L259>:
		  return ENDPOINT_RWCSTREAM_HostAborted;
 39a:	81 e0       	ldi	r24, 0x01	; 1

0000039c <.LBE444>:
}
 39c:	08 95       	ret

0000039e <.L257>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	08 95       	ret

000003a2 <.L258>:
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	08 95       	ret

000003a6 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 3a6:	98 2f       	mov	r25, r24

000003a8 <.L2>:
 3a8:	95 30       	cpi	r25, 0x05	; 5
 3aa:	28 f0       	brcs	.+10     	; 0x3b6 <.L7>

000003ac <.LBB58>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3ac:	8f 70       	andi	r24, 0x0F	; 15

000003ae <.LVL3>:
 3ae:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000003b2 <.LBE58>:
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	08 95       	ret

000003b6 <.L7>:
 3b6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000003ba <.LBE49>:
			UECFG1XTemp = UECFG1XData;
 3ba:	24 2f       	mov	r18, r20

000003bc <.Loc.25>:
			UECFG0XTemp = UECFG0XData;
 3bc:	76 2f       	mov	r23, r22

000003be <.Loc.26>:
			UEIENXTemp  = 0;
 3be:	50 e0       	ldi	r21, 0x00	; 0

000003c0 <.Loc.27>:
		if (EPNum == Number)
 3c0:	98 17       	cp	r25, r24
 3c2:	31 f0       	breq	.+12     	; 0x3d0 <.L3>

000003c4 <.LVL7>:
			UECFG0XTemp = UECFG0X;
 3c4:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

000003c8 <.LVL8>:
			UECFG1XTemp = UECFG1X;
 3c8:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

000003cc <.LVL9>:
			UEIENXTemp  = UEIENX;
 3cc:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

000003d0 <.L3>:
		if (!(UECFG1XTemp & (1 << ALLOC)))
 3d0:	21 fd       	sbrc	r18, 1
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <.L4>

000003d4 <.L6>:
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 3d4:	9f 5f       	subi	r25, 0xFF	; 255

000003d6 <.Loc.39>:
 3d6:	e8 cf       	rjmp	.-48     	; 0x3a8 <.L2>

000003d8 <.L4>:
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 3d8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 3dc:	3e 7f       	andi	r19, 0xFE	; 254
 3de:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

000003e2 <.LBE51>:
		UECFG1X &= ~(1 << ALLOC);
 3e2:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 3e6:	3d 7f       	andi	r19, 0xFD	; 253
 3e8:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

000003ec <.LBB53>:
				UECONX |= (1 << EPEN);
 3ec:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 3f0:	31 60       	ori	r19, 0x01	; 1
 3f2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

000003f6 <.LBE53>:
		UECFG0X = UECFG0XTemp;
 3f6:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

000003fa <.Loc.52>:
		UECFG1X = UECFG1XTemp;
 3fa:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

000003fe <.Loc.54>:
		UEIENX  = UEIENXTemp;
 3fe:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

00000402 <.LBB55>:
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 402:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

00000406 <.LBE55>:
		if (!(Endpoint_IsConfigured()))
 406:	27 fd       	sbrc	r18, 7
 408:	e5 cf       	rjmp	.-54     	; 0x3d4 <.L6>

0000040a <.Loc.62>:
		  return false;
 40a:	80 e0       	ldi	r24, 0x00	; 0

0000040c <.LBE57>:
#endif
}
 40c:	08 95       	ret

0000040e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 40e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_ControlRequest>
 412:	87 ff       	sbrs	r24, 7
 414:	13 c0       	rjmp	.+38     	; 0x43c <.L27>

00000416 <.L26>:
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 416:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000041a <.LBE81>:
	{
		while (!(Endpoint_IsOUTReceived()))
 41a:	82 ff       	sbrs	r24, 2
 41c:	06 c0       	rjmp	.+12     	; 0x42a <.L29>

0000041e <.LBB83>:
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 41e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 422:	8b 77       	andi	r24, 0x7B	; 123

00000424 <.L38>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 424:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000428 <.Loc.156>:
			}
 428:	04 c0       	rjmp	.+8      	; 0x432 <.L25>

0000042a <.L29>:
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 42a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>

0000042e <.Loc.159>:
 42e:	81 11       	cpse	r24, r1
 430:	f2 cf       	rjmp	.-28     	; 0x416 <.L26>

00000432 <.L25>:
			  return;
		}

		Endpoint_ClearIN();
	}
}
 432:	08 95       	ret

00000434 <.L30>:
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 434:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>

00000438 <.Loc.163>:
 438:	88 23       	and	r24, r24
 43a:	d9 f3       	breq	.-10     	; 0x432 <.L25>

0000043c <.L27>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 43c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000440 <.LBE88>:
		while (!(Endpoint_IsINReady()))
 440:	80 ff       	sbrs	r24, 0
 442:	f8 cf       	rjmp	.-16     	; 0x434 <.L30>

00000444 <.LBB90>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 444:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 448:	8e 77       	andi	r24, 0x7E	; 126
 44a:	ec cf       	rjmp	.-40     	; 0x424 <.L38>

0000044c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 44c:	40 d0       	rcall	.+128    	; 0x4ce <USB_INT_DisableAllInterrupts>

0000044e <.LVL2>:
	USB_INT_ClearAllInterrupts();
 44e:	42 d0       	rcall	.+132    	; 0x4d4 <USB_INT_ClearAllInterrupts>

00000450 <.LBB62>:
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 450:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 454:	8f 77       	andi	r24, 0x7F	; 127
 456:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

0000045a <.Loc.31>:
				USBCON |=  (1 << USBE);
 45a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 45e:	80 68       	ori	r24, 0x80	; 128
 460:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

00000464 <.LBB64>:
				USBCON &= ~(1 << FRZCLK);
 464:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 468:	8f 7d       	andi	r24, 0xDF	; 223
 46a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

0000046e <.LBB66>:
				PLLCSR = USB_PLL_PSC;
 46e:	19 bc       	out	0x29, r1	; 41

00000470 <.Loc.43>:
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	89 bd       	out	0x29, r24	; 41

00000474 <.L3>:

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 474:	09 b4       	in	r0, 0x29	; 41
 476:	00 fe       	sbrs	r0, 0
 478:	fd cf       	rjmp	.-6      	; 0x474 <.L3>

0000047a <.LBB70>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 47a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_DeviceState>

0000047e <.Loc.54>:
	USB_Device_ConfigurationNumber  = 0;
 47e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <USB_Device_ConfigurationNumber>

00000482 <.Loc.56>:

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 482:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_Device_RemoteWakeupEnabled>

00000486 <.Loc.58>:
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 486:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Device_CurrentlySelfPowered>

0000048a <.LBB72>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
 48a:	42 e0       	ldi	r20, 0x02	; 2
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	8a df       	rcall	.-236    	; 0x3a6 <Endpoint_ConfigureEndpoint_Prv>

00000492 <.LBB76>:
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 492:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 496:	8e 7f       	andi	r24, 0xFE	; 254
 498:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

0000049c <.LBB78>:
						UDIEN  |= (1 << SUSPE);
 49c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000004a6 <.LBB80>:
						UDIEN  |= (1 << EORSTE);
 4a6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 4aa:	88 60       	ori	r24, 0x08	; 8
 4ac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000004b0 <.LBB82>:
				UDCON  &= ~(1 << DETACH);
 4b0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
 4b4:	8e 7f       	andi	r24, 0xFE	; 254
 4b6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>

000004ba <.LBE82>:
}
 4ba:	08 95       	ret

000004bc <USB_Init>:
				REGCR  &= ~(1 << REGDIS);
 4bc:	e3 e6       	ldi	r30, 0x63	; 99
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	8e 7f       	andi	r24, 0xFE	; 254
 4c4:	80 83       	st	Z, r24

000004c6 <.LBE86>:
	USB_IsInitialized = true;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_IsInitialized>

000004cc <.Loc.110>:
	USB_ResetInterface();
 4cc:	bf cf       	rjmp	.-130    	; 0x44c <USB_ResetInterface>

000004ce <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 4ce:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000004d2 <.Loc.3>:
	#endif
}
 4d2:	08 95       	ret

000004d4 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 4d4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

000004d8 <.Loc.7>:
	#endif
}
 4d8:	08 95       	ret

000004da <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 4da:	1f 92       	push	r1

000004dc <.LCFI0>:
 4dc:	0f 92       	push	r0

000004de <.LCFI1>:
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	0f 92       	push	r0
 4e2:	11 24       	eor	r1, r1
 4e4:	2f 93       	push	r18

000004e6 <.LCFI2>:
 4e6:	3f 93       	push	r19

000004e8 <.LCFI3>:
 4e8:	4f 93       	push	r20

000004ea <.LCFI4>:
 4ea:	5f 93       	push	r21

000004ec <.LCFI5>:
 4ec:	6f 93       	push	r22

000004ee <.LCFI6>:
 4ee:	7f 93       	push	r23

000004f0 <.LCFI7>:
 4f0:	8f 93       	push	r24

000004f2 <.LCFI8>:
 4f2:	9f 93       	push	r25

000004f4 <.LCFI9>:
 4f4:	af 93       	push	r26

000004f6 <.LCFI10>:
 4f6:	bf 93       	push	r27

000004f8 <.LCFI11>:
 4f8:	ef 93       	push	r30

000004fa <.LCFI12>:
 4fa:	ff 93       	push	r31

000004fc <.LBB76>:
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 4fc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000500 <.LBE76>:
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 500:	82 ff       	sbrs	r24, 2
 502:	0a c0       	rjmp	.+20     	; 0x518 <.L4>

00000504 <.LBB78>:
						return (UDIEN  & (1 << SOFE));
 504:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000508 <.LBE78>:
 508:	82 ff       	sbrs	r24, 2
 50a:	06 c0       	rjmp	.+12     	; 0x518 <.L4>

0000050c <.LBB80>:
						UDINT  &= ~(1 << SOFI);
 50c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 510:	8b 7f       	andi	r24, 0xFB	; 251
 512:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000516 <.LBE80>:
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 516:	27 d2       	rcall	.+1102   	; 0x966 <USB_Event_Stub>

00000518 <.L4>:
						return (UDINT  & (1 << SUSPI));
 518:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

0000051c <.LBE82>:
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 51c:	80 ff       	sbrs	r24, 0
 51e:	17 c0       	rjmp	.+46     	; 0x54e <.L5>

00000520 <.LBB84>:
						return (UDIEN  & (1 << SUSPE));
 520:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000524 <.LBE84>:
 524:	80 ff       	sbrs	r24, 0
 526:	13 c0       	rjmp	.+38     	; 0x54e <.L5>

00000528 <.LBB86>:
						UDIEN  &= ~(1 << SUSPE);
 528:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 52c:	8e 7f       	andi	r24, 0xFE	; 254
 52e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000532 <.LBB88>:
						UDIEN  |= (1 << WAKEUPE);
 532:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 536:	80 61       	ori	r24, 0x10	; 16
 538:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

0000053c <.LBB90>:
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 53c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 540:	80 62       	ori	r24, 0x20	; 32
 542:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

00000546 <.LBB92>:
				PLLCSR = 0;
 546:	19 bc       	out	0x29, r1	; 41

00000548 <.LBE92>:

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 548:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_DeviceState>

0000054c <.Loc.68>:
		EVENT_USB_Device_Disconnect();
 54c:	fc dd       	rcall	.-1032   	; 0x146 <EVENT_USB_Device_Disconnect>

0000054e <.L5>:
						return (UDINT  & (1 << WAKEUPI));
 54e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

00000552 <.LBE94>:
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 552:	84 ff       	sbrs	r24, 4
 554:	27 c0       	rjmp	.+78     	; 0x5a4 <.L6>

00000556 <.LBB96>:
						return (UDIEN  & (1 << WAKEUPE));
 556:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

0000055a <.LBE96>:
 55a:	84 ff       	sbrs	r24, 4
 55c:	23 c0       	rjmp	.+70     	; 0x5a4 <.L6>

0000055e <.LBB98>:
				PLLCSR = USB_PLL_PSC;
 55e:	19 bc       	out	0x29, r1	; 41

00000560 <.Loc.87>:
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	89 bd       	out	0x29, r24	; 41

00000564 <.L7>:
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 564:	09 b4       	in	r0, 0x29	; 41
 566:	00 fe       	sbrs	r0, 0
 568:	fd cf       	rjmp	.-6      	; 0x564 <.L7>

0000056a <.LBB102>:
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 56a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 56e:	8f 7d       	andi	r24, 0xDF	; 223
 570:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>

00000574 <.LBB104>:
						UDINT  &= ~(1 << WAKEUPI);
 574:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 578:	8f 7e       	andi	r24, 0xEF	; 239
 57a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

0000057e <.LBB106>:
						UDIEN  &= ~(1 << WAKEUPE);
 57e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 582:	8f 7e       	andi	r24, 0xEF	; 239
 584:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000588 <.LBB108>:
						UDIEN  |= (1 << SUSPE);
 588:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 58c:	81 60       	ori	r24, 0x01	; 1
 58e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

00000592 <.LBE108>:
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 592:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_Device_ConfigurationNumber>
 596:	88 23       	and	r24, r24
 598:	09 f4       	brne	.+2      	; 0x59c <.Loc.121>

0000059a <L0^A>:
 59a:	40 c0       	rjmp	.+128    	; 0x61c <.L8>

0000059c <.Loc.121>:
		  USB_DeviceState = DEVICE_STATE_Configured;
 59c:	84 e0       	ldi	r24, 0x04	; 4

0000059e <.L10>:
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 59e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_DeviceState>

000005a2 <.Loc.124>:

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 5a2:	d0 dd       	rcall	.-1120   	; 0x144 <EVENT_USB_Device_Connect>

000005a4 <.L6>:
						return (UDINT  & (1 << EORSTI));
 5a4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

000005a8 <.LBE110>:
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 5a8:	83 ff       	sbrs	r24, 3
 5aa:	27 c0       	rjmp	.+78     	; 0x5fa <.L3>

000005ac <.LBB112>:
						return (UDIEN  & (1 << EORSTE));
 5ac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000005b0 <.LBE112>:
 5b0:	83 ff       	sbrs	r24, 3
 5b2:	23 c0       	rjmp	.+70     	; 0x5fa <.L3>

000005b4 <.LBB114>:
						UDINT  &= ~(1 << EORSTI);
 5b4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 5b8:	87 7f       	andi	r24, 0xF7	; 247
 5ba:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

000005be <.LBE114>:
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_DeviceState>

000005c4 <.Loc.147>:
		USB_Device_ConfigurationNumber = 0;
 5c4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <USB_Device_ConfigurationNumber>

000005c8 <.LBB116>:
						UDINT  &= ~(1 << SUSPI);
 5c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 5cc:	8e 7f       	andi	r24, 0xFE	; 254
 5ce:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

000005d2 <.LBB118>:
						UDIEN  &= ~(1 << SUSPE);
 5d2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 5d6:	8e 7f       	andi	r24, 0xFE	; 254
 5d8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000005dc <.LBB120>:
						UDIEN  |= (1 << WAKEUPE);
 5dc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 5e0:	80 61       	ori	r24, 0x10	; 16
 5e2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

000005e6 <.LBB122>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 5e6:	42 e0       	ldi	r20, 0x02	; 2
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	dc de       	rcall	.-584    	; 0x3a6 <Endpoint_ConfigureEndpoint_Prv>

000005ee <.LBB126>:
						UEIENX |= (1 << RXSTPE);
 5ee:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 5f2:	88 60       	ori	r24, 0x08	; 8
 5f4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

000005f8 <.LBE126>:

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 5f8:	b6 d1       	rcall	.+876    	; 0x966 <USB_Event_Stub>

000005fa <.L3>:
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	7f 91       	pop	r23
 608:	6f 91       	pop	r22
 60a:	5f 91       	pop	r21
 60c:	4f 91       	pop	r20
 60e:	3f 91       	pop	r19
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <.L8>:
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 61c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

00000620 <.LBE128>:
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 620:	87 fd       	sbrc	r24, 7
 622:	02 c0       	rjmp	.+4      	; 0x628 <.L12>
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	bb cf       	rjmp	.-138    	; 0x59e <.L10>

00000628 <.L12>:
 628:	83 e0       	ldi	r24, 0x03	; 3
 62a:	b9 cf       	rjmp	.-142    	; 0x59e <.L10>

0000062c <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 62c:	1f 92       	push	r1

0000062e <.LCFI14>:
 62e:	0f 92       	push	r0

00000630 <.LCFI15>:
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	2f 93       	push	r18

00000638 <.LCFI16>:
 638:	3f 93       	push	r19

0000063a <.LCFI17>:
 63a:	4f 93       	push	r20

0000063c <.LCFI18>:
 63c:	5f 93       	push	r21

0000063e <.LCFI19>:
 63e:	6f 93       	push	r22

00000640 <.LCFI20>:
 640:	7f 93       	push	r23

00000642 <.LCFI21>:
 642:	8f 93       	push	r24

00000644 <.LCFI22>:
 644:	9f 93       	push	r25

00000646 <.LCFI23>:
 646:	af 93       	push	r26

00000648 <.LCFI24>:
 648:	bf 93       	push	r27

0000064a <.LCFI25>:
 64a:	cf 93       	push	r28

0000064c <.LCFI26>:
 64c:	df 93       	push	r29

0000064e <.LCFI27>:
 64e:	ef 93       	push	r30

00000650 <.LCFI28>:
 650:	ff 93       	push	r31

00000652 <.LBB130>:
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 652:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000656 <.Loc.202>:
 656:	df 70       	andi	r29, 0x0F	; 15

00000658 <.LBB132>:
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 658:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

0000065c <.Loc.206>:
 65c:	c8 2f       	mov	r28, r24
 65e:	c1 70       	andi	r28, 0x01	; 1
 660:	80 fd       	sbrc	r24, 0
 662:	c0 e8       	ldi	r28, 0x80	; 128

00000664 <.LBB135>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 664:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000668 <.LBB137>:
						UEIENX &= ~(1 << RXSTPE);
 668:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 66c:	87 7f       	andi	r24, 0xF7	; 247
 66e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

00000672 <.LBB139>:
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 672:	78 94       	sei

00000674 <.LBE139>:
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 674:	1e d0       	rcall	.+60     	; 0x6b2 <USB_Device_ProcessControlRequest>

00000676 <.LBB141>:
 676:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000067a <.LBB143>:
						UEIENX |= (1 << RXSTPE);
 67a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 67e:	88 60       	ori	r24, 0x08	; 8
 680:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

00000684 <.LBB145>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 684:	cd 2b       	or	r28, r29

00000686 <.LBB149>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 686:	cf 70       	andi	r28, 0x0F	; 15

00000688 <.LVL41>:
 688:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000068c <.LBE149>:

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 68c:	ff 91       	pop	r31
 68e:	ef 91       	pop	r30
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 6b2:	1f 93       	push	r17

000006b4 <.LCFI0>:
 6b4:	cf 93       	push	r28

000006b6 <.LCFI1>:
 6b6:	df 93       	push	r29

000006b8 <.LCFI2>:
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62

000006bc <.LCFI3>:
 6bc:	aa 97       	sbiw	r28, 0x2a	; 42

000006be <.LCFI4>:
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	f8 94       	cli
 6c2:	de bf       	out	0x3e, r29	; 62
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	cd bf       	out	0x3d, r28	; 61

000006c8 <.LBB172>:
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 6c8:	89 e1       	ldi	r24, 0x19	; 25
 6ca:	91 e0       	ldi	r25, 0x01	; 1

000006cc <.L2>:

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 6cc:	fc 01       	movw	r30, r24

000006ce <.Loc.7>:
 6ce:	01 96       	adiw	r24, 0x01	; 1

000006d0 <.LBB173>:
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 6d0:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

000006d4 <.LBE173>:
 6d4:	20 83       	st	Z, r18

000006d6 <.Loc.12>:
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 6d6:	21 e0       	ldi	r18, 0x01	; 1
 6d8:	81 32       	cpi	r24, 0x21	; 33
 6da:	92 07       	cpc	r25, r18
 6dc:	b9 f7       	brne	.-18     	; 0x6cc <.L2>

000006de <.LBE175>:
	#endif

	EVENT_USB_Device_ControlRequest();
 6de:	3c dd       	rcall	.-1416   	; 0x158 <EVENT_USB_Device_ControlRequest>

000006e0 <.LBB176>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000006e4 <.LBE176>:

	if (Endpoint_IsSETUPReceived())
 6e4:	83 ff       	sbrs	r24, 3
 6e6:	10 c0       	rjmp	.+32     	; 0x708 <.L3>

000006e8 <.LBB178>:
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 6e8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_ControlRequest>

000006ec <.LVL5>:

		switch (USB_ControlRequest.bRequest)
 6ec:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <USB_ControlRequest+0x1>

000006f0 <.Loc.25>:
 6f0:	95 30       	cpi	r25, 0x05	; 5
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <.LLST137+0x1>

000006f4 <L0^A>:
 6f4:	c2 c0       	rjmp	.+388    	; 0x87a <.L4>
 6f6:	00 f5       	brcc	.+64     	; 0x738 <.L5>
 6f8:	29 2f       	mov	r18, r25
 6fa:	2d 7f       	andi	r18, 0xFD	; 253
 6fc:	21 30       	cpi	r18, 0x01	; 1
 6fe:	09 f4       	brne	.+2      	; 0x702 <L0^A+0x2>

00000700 <L0^A>:
 700:	89 c0       	rjmp	.+274    	; 0x814 <.L6>
 702:	99 23       	and	r25, r25
 704:	09 f4       	brne	.+2      	; 0x708 <.L3>

00000706 <L0^A>:
 706:	5e c0       	rjmp	.+188    	; 0x7c4 <.L7>

00000708 <.L3>:
 708:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000070c <.LBE276>:
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 70c:	83 ff       	sbrs	r24, 3
 70e:	0a c0       	rjmp	.+20     	; 0x724 <.L1>

00000710 <.LBB278>:
				UEINTX &= ~(1 << RXSTPI);
 710:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 714:	87 7f       	andi	r24, 0xF7	; 247
 716:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000071a <.LBB280>:
				UECONX |= (1 << STALLRQ);
 71a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 71e:	80 62       	ori	r24, 0x20	; 32
 720:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000724 <.L1>:
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 724:	aa 96       	adiw	r28, 0x2a	; 42
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	f8 94       	cli
 72a:	de bf       	out	0x3e, r29	; 62
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	1f 91       	pop	r17
 736:	08 95       	ret

00000738 <.L5>:
		switch (USB_ControlRequest.bRequest)
 738:	98 30       	cpi	r25, 0x08	; 8
 73a:	09 f4       	brne	.+2      	; 0x73e <L0^A+0x2>

0000073c <L0^A>:
 73c:	d5 c0       	rjmp	.+426    	; 0x8e8 <.L8>
 73e:	99 30       	cpi	r25, 0x09	; 9
 740:	09 f4       	brne	.+2      	; 0x744 <L0^A+0x2>

00000742 <L0^A>:
 742:	df c0       	rjmp	.+446    	; 0x902 <.L9>
 744:	96 30       	cpi	r25, 0x06	; 6
 746:	01 f7       	brne	.-64     	; 0x708 <.L3>

00000748 <.Loc.42>:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 748:	80 58       	subi	r24, 0x80	; 128

0000074a <.LVL8>:
 74a:	82 30       	cpi	r24, 0x02	; 2
 74c:	e8 f6       	brcc	.-70     	; 0x708 <.L3>

0000074e <.LBB179>:
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 74e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
 752:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <USB_ControlRequest+0x3>

00000756 <.Loc.51>:
 756:	8c 3d       	cpi	r24, 0xDC	; 220
 758:	23 e0       	ldi	r18, 0x03	; 3
 75a:	92 07       	cpc	r25, r18
 75c:	09 f0       	breq	.+2      	; 0x760 <.LBB181>

0000075e <L0^A>:
 75e:	af c0       	rjmp	.+350    	; 0x8be <.L22>

00000760 <.LBB181>:
	SignatureDescriptor.Header.Type = DTYPE_String;
 760:	83 e0       	ldi	r24, 0x03	; 3
 762:	8a 83       	std	Y+2, r24	; 0x02

00000764 <.Loc.57>:
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 764:	8a e2       	ldi	r24, 0x2A	; 42
 766:	89 83       	std	Y+1, r24	; 0x01

00000768 <.LBB183>:
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 768:	4f b7       	in	r20, 0x3f	; 63

0000076a <.LBB187>:
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 76a:	f8 94       	cli

0000076c <.LBB189>:
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 76c:	de 01       	movw	r26, r28
 76e:	13 96       	adiw	r26, 0x03	; 3

00000770 <.Loc.79>:
 770:	20 e0       	ldi	r18, 0x00	; 0

00000772 <.LBE189>:
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 772:	3e e0       	ldi	r19, 0x0E	; 14

00000774 <.LBB190>:
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 774:	51 e2       	ldi	r21, 0x21	; 33

00000776 <.L26>:
 776:	e3 2f       	mov	r30, r19
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 77e:	e4 91       	lpm	r30, Z

00000780 <.LBE192>:

					if (SerialCharNum & 0x01)
 780:	20 ff       	sbrs	r18, 0
 782:	03 c0       	rjmp	.+6      	; 0x78a <.L23>

00000784 <.Loc.90>:
					{
						SerialByte >>= 4;
 784:	e2 95       	swap	r30

00000786 <.LVL14>:
 786:	ef 70       	andi	r30, 0x0F	; 15

00000788 <.LVL15>:
						SigReadAddress++;
 788:	3f 5f       	subi	r19, 0xFF	; 255

0000078a <.L23>:
					}

					SerialByte &= 0x0F;
 78a:	ef 70       	andi	r30, 0x0F	; 15

0000078c <.Loc.97>:

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 78c:	8e 2f       	mov	r24, r30
 78e:	90 e0       	ldi	r25, 0x00	; 0

00000790 <.Loc.98>:
 790:	ea 30       	cpi	r30, 0x0A	; 10
 792:	08 f4       	brcc	.+2      	; 0x796 <.Loc.99>

00000794 <L0^A>:
 794:	92 c0       	rjmp	.+292    	; 0x8ba <.L24>

00000796 <.Loc.99>:
 796:	c7 96       	adiw	r24, 0x37	; 55

00000798 <.L25>:
 798:	8d 93       	st	X+, r24
 79a:	9d 93       	st	X+, r25

0000079c <.LBE190>:
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 79c:	2f 5f       	subi	r18, 0xFF	; 255

0000079e <.Loc.103>:
 79e:	24 31       	cpi	r18, 0x14	; 20
 7a0:	51 f7       	brne	.-44     	; 0x776 <.L26>

000007a2 <.LBB195>:
				SREG = GlobalIntState;
 7a2:	4f bf       	out	0x3f, r20	; 63

000007a4 <.LBB199>:
				UEINTX &= ~(1 << RXSTPI);
 7a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 7a8:	87 7f       	andi	r24, 0xF7	; 247
 7aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000007ae <.LBE199>:
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 7ae:	6a e2       	ldi	r22, 0x2A	; 42
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	ce 01       	movw	r24, r28
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	44 dd       	rcall	.-1400   	; 0x240 <Endpoint_Write_Control_Stream_LE>

000007b8 <.L61>:
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 7bc:	8b 77       	andi	r24, 0x7B	; 123
 7be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000007c2 <.LBE205>:
 7c2:	a2 cf       	rjmp	.-188    	; 0x708 <.L3>

000007c4 <.L7>:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7c4:	80 38       	cpi	r24, 0x80	; 128
 7c6:	99 f0       	breq	.+38     	; 0x7ee <.L11>

000007c8 <.Loc.130>:
 7c8:	82 38       	cpi	r24, 0x82	; 130
 7ca:	09 f0       	breq	.+2      	; 0x7ce <.LBB211>

000007cc <L0^A>:
 7cc:	9d cf       	rjmp	.-198    	; 0x708 <.L3>

000007ce <.LBB211>:
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7ce:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x4>

000007d2 <.LVL25>:
 7d2:	8f 70       	andi	r24, 0x0F	; 15

000007d4 <.LVL26>:

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 7d4:	85 30       	cpi	r24, 0x05	; 5
 7d6:	08 f0       	brcs	.+2      	; 0x7da <.LBB214>

000007d8 <L0^A>:
 7d8:	97 cf       	rjmp	.-210    	; 0x708 <.L3>

000007da <.LBB214>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7da:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000007de <.LBB216>:
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7de:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

000007e2 <.LVL29>:
 7e2:	85 fb       	bst	r24, 5
 7e4:	88 27       	eor	r24, r24
 7e6:	80 f9       	bld	r24, 0

000007e8 <.LBB218>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7e8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

000007ec <.LVL31>:
			}
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <.L13>

000007ee <.L11>:
	uint8_t CurrentStatus = 0;
 7ee:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_Device_CurrentlySelfPowered>

000007f2 <.LVL33>:
			if (USB_Device_RemoteWakeupEnabled)
 7f2:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <USB_Device_RemoteWakeupEnabled>
 7f6:	91 11       	cpse	r25, r1

000007f8 <.Loc.161>:
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 7f8:	82 60       	ori	r24, 0x02	; 2

000007fa <.L13>:
				UEINTX &= ~(1 << RXSTPI);
 7fa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 7fe:	97 7f       	andi	r25, 0xF7	; 247
 800:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000804 <.LBB222>:
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 804:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

00000808 <.Loc.171>:
				UEDATX = (Data >> 8);
 808:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

0000080c <.L62>:
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 80c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 810:	8e 77       	andi	r24, 0x7E	; 126
 812:	a5 c0       	rjmp	.+330    	; 0x95e <.L60>

00000814 <.L6>:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 814:	88 23       	and	r24, r24
 816:	09 f4       	brne	.+2      	; 0x81a <.Loc.185>

00000818 <L0^A>:
 818:	92 c0       	rjmp	.+292    	; 0x93e <.L14>

0000081a <.Loc.185>:
 81a:	82 30       	cpi	r24, 0x02	; 2
 81c:	09 f0       	breq	.+2      	; 0x820 <.LBB235>

0000081e <L0^A>:
 81e:	74 cf       	rjmp	.-280    	; 0x708 <.L3>

00000820 <.LBB235>:
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 820:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest+0x2>

00000824 <.LVL38>:
 824:	81 11       	cpse	r24, r1
 826:	96 c0       	rjmp	.+300    	; 0x954 <.L17>

00000828 <.LBB237>:
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 828:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x4>
 82c:	8f 70       	andi	r24, 0x0F	; 15

0000082e <.LVL39>:

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 82e:	2f ef       	ldi	r18, 0xFF	; 255
 830:	28 0f       	add	r18, r24

00000832 <.Loc.196>:
 832:	24 30       	cpi	r18, 0x04	; 4
 834:	08 f0       	brcs	.+2      	; 0x838 <.LBB238>

00000836 <L0^A>:
 836:	68 cf       	rjmp	.-304    	; 0x708 <.L3>

00000838 <.LBB238>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 838:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000083c <.LBB240>:
				return ((UECONX & (1 << EPEN)) ? true : false);
 83c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000840 <.LBE240>:
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 840:	20 ff       	sbrs	r18, 0
 842:	88 c0       	rjmp	.+272    	; 0x954 <.L17>

00000844 <.Loc.207>:
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 844:	93 30       	cpi	r25, 0x03	; 3
 846:	31 f4       	brne	.+12     	; 0x854 <.L19>

00000848 <.LBB242>:
				UECONX |= (1 << STALLRQ);
 848:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

0000084c <.LVL42>:
 84c:	80 62       	ori	r24, 0x20	; 32

0000084e <.L59>:
				UECONX |= (1 << RSTDT);
 84e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000852 <.Loc.216>:
			}
 852:	80 c0       	rjmp	.+256    	; 0x954 <.L17>

00000854 <.L19>:
				UECONX |= (1 << STALLRQC);
 854:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 858:	90 61       	ori	r25, 0x10	; 16
 85a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

0000085e <.LBB249>:
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 85e:	21 e0       	ldi	r18, 0x01	; 1
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	01 c0       	rjmp	.+2      	; 0x866 <.L2^B1>

00000864 <.L1^B1>:
 864:	22 0f       	add	r18, r18

00000866 <.L2^B1>:
 866:	8a 95       	dec	r24
 868:	ea f7       	brpl	.-6      	; 0x864 <.L1^B1>

0000086a <.Loc.226>:
 86a:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>

0000086e <.Loc.227>:
				UERST = 0;
 86e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>

00000872 <.LBB251>:
				UECONX |= (1 << RSTDT);
 872:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

00000876 <.LVL47>:
 876:	88 60       	ori	r24, 0x08	; 8
 878:	ea cf       	rjmp	.-44     	; 0x84e <.L59>

0000087a <.L4>:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 87a:	81 11       	cpse	r24, r1
 87c:	45 cf       	rjmp	.-374    	; 0x708 <.L3>

0000087e <.LBB257>:
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 87e:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
 882:	1f 77       	andi	r17, 0x7F	; 127

00000884 <.LBB259>:
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 884:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

00000888 <.LVL50>:
 888:	80 78       	andi	r24, 0x80	; 128

0000088a <.Loc.247>:
 88a:	81 2b       	or	r24, r17

0000088c <.Loc.248>:
 88c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

00000890 <.LBB261>:
				UEINTX &= ~(1 << RXSTPI);
 890:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 894:	87 7f       	andi	r24, 0xF7	; 247
 896:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000089a <.LBE261>:
	Endpoint_ClearStatusStage();
 89a:	b9 dd       	rcall	.-1166   	; 0x40e <Endpoint_ClearStatusStage>

0000089c <.L20>:
				return ((UEINTX & (1 << TXINI)) ? true : false);
 89c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000008a0 <.LBE263>:
	while (!(Endpoint_IsINReady()));
 8a0:	80 ff       	sbrs	r24, 0
 8a2:	fc cf       	rjmp	.-8      	; 0x89c <.L20>

000008a4 <.LBB265>:
				UDADDR |= (1 << ADDEN);
 8a4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 8a8:	80 68       	ori	r24, 0x80	; 128
 8aa:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

000008ae <.LBE265>:
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 8ae:	82 e0       	ldi	r24, 0x02	; 2
 8b0:	11 11       	cpse	r17, r1
 8b2:	83 e0       	ldi	r24, 0x03	; 3
 8b4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_DeviceState>

000008b8 <.Loc.270>:
}
 8b8:	27 cf       	rjmp	.-434    	; 0x708 <.L3>

000008ba <.L24>:
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 8ba:	c0 96       	adiw	r24, 0x30	; 48

000008bc <.LVL56>:
 8bc:	6d cf       	rjmp	.-294    	; 0x798 <.L25>

000008be <.L22>:
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 8be:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <USB_ControlRequest+0x4>
 8c2:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <USB_ControlRequest+0x5>
 8c6:	ae 01       	movw	r20, r28
 8c8:	4f 5f       	subi	r20, 0xFF	; 255
 8ca:	5f 4f       	sbci	r21, 0xFF	; 255
 8cc:	88 dc       	rcall	.-1776   	; 0x1de <CALLBACK_USB_GetDescriptor>

000008ce <.LVL58>:
 8ce:	bc 01       	movw	r22, r24

000008d0 <.LVL59>:
 8d0:	89 2b       	or	r24, r25
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <.LBB208>

000008d4 <L0^A>:
 8d4:	19 cf       	rjmp	.-462    	; 0x708 <.L3>

000008d6 <.LBB208>:
				UEINTX &= ~(1 << RXSTPI);
 8d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 8da:	87 7f       	andi	r24, 0xF7	; 247
 8dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000008e0 <.LBE208>:
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 8e0:	89 81       	ldd	r24, Y+1	; 0x01
 8e2:	9a 81       	ldd	r25, Y+2	; 0x02
 8e4:	06 dd       	rcall	.-1524   	; 0x2f2 <Endpoint_Write_Control_PStream_LE>

000008e6 <.LVL60>:
 8e6:	68 cf       	rjmp	.-304    	; 0x7b8 <.L61>

000008e8 <.L8>:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 8e8:	80 38       	cpi	r24, 0x80	; 128
 8ea:	09 f0       	breq	.+2      	; 0x8ee <.LBB230>

000008ec <L0^A>:
 8ec:	0d cf       	rjmp	.-486    	; 0x708 <.L3>

000008ee <.LBB230>:
 8ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000008f2 <.LVL62>:
 8f2:	87 7f       	andi	r24, 0xF7	; 247
 8f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

000008f8 <.LBE230>:
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 8f8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_Device_ConfigurationNumber>

000008fc <.LBB232>:
				UEDATX = Data;
 8fc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 900:	85 cf       	rjmp	.-246    	; 0x80c <.L62>

00000902 <.L9>:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 902:	81 11       	cpse	r24, r1
 904:	01 cf       	rjmp	.-510    	; 0x708 <.L3>

00000906 <.LBB269>:
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 906:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
 90a:	92 30       	cpi	r25, 0x02	; 2
 90c:	08 f0       	brcs	.+2      	; 0x910 <.LBB271>

0000090e <L0^A>:
 90e:	fc ce       	rjmp	.-520    	; 0x708 <.L3>

00000910 <.LBB271>:
				UEINTX &= ~(1 << RXSTPI);
 910:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000914 <.LVL66>:
 914:	87 7f       	andi	r24, 0xF7	; 247
 916:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000091a <.LBE271>:
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 91a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <USB_Device_ConfigurationNumber>

0000091e <.Loc.315>:
	Endpoint_ClearStatusStage();
 91e:	77 dd       	rcall	.-1298   	; 0x40e <Endpoint_ClearStatusStage>

00000920 <.LVL68>:
	if (USB_Device_ConfigurationNumber)
 920:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_Device_ConfigurationNumber>
 924:	88 23       	and	r24, r24
 926:	11 f0       	breq	.+4      	; 0x92c <.L28>

00000928 <.L36>:
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 928:	84 e0       	ldi	r24, 0x04	; 4
 92a:	05 c0       	rjmp	.+10     	; 0x936 <.L30>

0000092c <.L28>:
				return (UDADDR & (1 << ADDEN));
 92c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

00000930 <.LBE273>:
 930:	87 fd       	sbrc	r24, 7
 932:	fa cf       	rjmp	.-12     	; 0x928 <.L36>
 934:	81 e0       	ldi	r24, 0x01	; 1

00000936 <.L30>:
 936:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_DeviceState>

0000093a <.Loc.324>:
	EVENT_USB_Device_ConfigurationChanged();
 93a:	06 dc       	rcall	.-2036   	; 0x148 <EVENT_USB_Device_ConfigurationChanged>

0000093c <.LVL69>:
 93c:	e5 ce       	rjmp	.-566    	; 0x708 <.L3>

0000093e <.L14>:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 93e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest+0x2>

00000942 <.LVL71>:
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	09 f0       	breq	.+2      	; 0x948 <.Loc.332>

00000946 <L0^A>:
 946:	e0 ce       	rjmp	.-576    	; 0x708 <.L3>

00000948 <.Loc.332>:
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	93 30       	cpi	r25, 0x03	; 3
 94c:	09 f0       	breq	.+2      	; 0x950 <.L16>
 94e:	80 e0       	ldi	r24, 0x00	; 0

00000950 <.L16>:
 950:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <USB_Device_RemoteWakeupEnabled>

00000954 <.L17>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 954:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000958 <.LBB254>:
				UEINTX &= ~(1 << RXSTPI);
 958:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 95c:	87 7f       	andi	r24, 0xF7	; 247

0000095e <.L60>:
 95e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

00000962 <.LBE254>:

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 962:	55 dd       	rcall	.-1366   	; 0x40e <Endpoint_ClearStatusStage>

00000964 <.LVL74>:
 964:	d1 ce       	rjmp	.-606    	; 0x708 <.L3>

00000966 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 966:	08 95       	ret

00000968 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 968:	cf 93       	push	r28

0000096a <.LBB26>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 96a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>

0000096e <.Loc.5>:
 96e:	88 23       	and	r24, r24
 970:	99 f0       	breq	.+38     	; 0x998 <.L1>

00000972 <.LBB28>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 972:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000976 <.Loc.10>:
 976:	cf 70       	andi	r28, 0x0F	; 15

00000978 <.LBB30>:
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 978:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

0000097c <.Loc.14>:
 97c:	89 2f       	mov	r24, r25
 97e:	81 70       	andi	r24, 0x01	; 1
 980:	90 fd       	sbrc	r25, 0
 982:	80 e8       	ldi	r24, 0x80	; 128

00000984 <.LBE30>:
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 984:	c8 2b       	or	r28, r24

00000986 <.LBB32>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 986:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

0000098a <.LBB34>:
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 98a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

0000098e <.LBE34>:

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 98e:	83 fd       	sbrc	r24, 3

00000990 <.Loc.27>:
	  USB_Device_ProcessControlRequest();
 990:	90 de       	rcall	.-736    	; 0x6b2 <USB_Device_ProcessControlRequest>

00000992 <.LBB36>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 992:	cf 70       	andi	r28, 0x0F	; 15

00000994 <.LVL3>:
 994:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

00000998 <.L1>:
}
 998:	cf 91       	pop	r28
 99a:	08 95       	ret

0000099c <strcmp>:
 99c:	fb 01       	movw	r30, r22
 99e:	dc 01       	movw	r26, r24

000009a0 <.L_strcmp_loop>:
 9a0:	8d 91       	ld	r24, X+
 9a2:	01 90       	ld	r0, Z+
 9a4:	80 19       	sub	r24, r0
 9a6:	01 10       	cpse	r0, r1
 9a8:	d9 f3       	breq	.-10     	; 0x9a0 <.L_strcmp_loop>
 9aa:	99 0b       	sbc	r25, r25
 9ac:	08 95       	ret

000009ae <_exit>:
 9ae:	f8 94       	cli

000009b0 <__stop_program>:
 9b0:	ff cf       	rjmp	.-2      	; 0x9b0 <__stop_program>
